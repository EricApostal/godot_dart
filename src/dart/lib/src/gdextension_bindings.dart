// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class GDExtension {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GDExtension(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GDExtension.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.UnsignedInt)>>(
          '__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final __fgetwchar = __fgetwcharPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('_fputwchar');
  late final __fputwchar = __fputwcharPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Int, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.WChar> _getws_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_getws_s');
  late final __getws_s = __getws_sPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int _putws(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_putws');
  late final __putws =
      __putwsPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>)>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final __wfreopen_s = __wfreopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<ffi.WChar> _Command,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wremove(
    ffi.Pointer<ffi.WChar> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wremove');
  late final __wremove =
      __wremovePtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wtempnam(
    ffi.Pointer<ffi.WChar> _Directory,
    ffi.Pointer<ffi.WChar> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wtmpnam_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wtmpnam(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr.asFunction<
      int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>, _locale_t,
          va_list)>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf =
      ___stdio_common_vswprintfPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, int,
              ffi.Pointer<ffi.WChar>, _locale_t, va_list)>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          _locale_t, va_list)>();

  int _get_stream_buffer_pointers(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointersPtr = _lookup<
          ffi.NativeFunction<
              errno_t Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>)>>(
      '_get_stream_buffer_pointers');
  late final __get_stream_buffer_pointers =
      __get_stream_buffer_pointersPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<FILE>)>>(
          'clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> gets_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, rsize_t)>>('gets_s');
  late final _gets_s = _gets_sPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>)>>(
      'tmpfile_s');
  late final _tmpfile_s =
      _tmpfile_sPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<FILE>>)>();

  int tmpnam_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Char>, rsize_t)>>(
      'tmpnam_s');
  late final _tmpnam_s =
      _tmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fcloseall');
  late final __fcloseall = __fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('_fdopen');
  late final __fdopen = __fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fgetchar');
  late final __fgetchar = __fgetcharPtr.asFunction<int Function()>();

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int _fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fileno');
  late final __fileno =
      __filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _flushall() {
    return __flushall();
  }

  late final __flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_flushall');
  late final __flushall = __flushallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_fputchar');
  late final __fputchar = __fputcharPtr.asFunction<int Function(int)>();

  int fputs(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _fsopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_fsopen');
  late final __fsopen = __fsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64');
  late final __fseeki64 =
      __fseeki64Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64');
  late final __ftelli64 =
      __ftelli64Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_getmaxstdio');
  late final __getmaxstdio = __getmaxstdioPtr.asFunction<int Function()>();

  int _getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('_getw');
  late final __getw = __getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int _pclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_pclose');
  late final __pclose =
      __pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _popen(
    ffi.Pointer<ffi.Char> _Command,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_popen');
  late final __popen = __popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putw(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putw');
  late final __putw =
      __putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int remove(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> _OldFileName,
    ffi.Pointer<ffi.Char> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_unlink');
  late final __unlink =
      __unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _unlink1(
      _FileName,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink1 =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_rmtmp');
  late final __rmtmp = __rmtmpPtr.asFunction<int Function()>();

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_setmaxstdio');
  late final __setmaxstdio = __setmaxstdioPtr.asFunction<int Function(int)>();

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _tempnam(
    ffi.Pointer<ffi.Char> _DirectoryName,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_tempnam');
  late final __tempnam = __tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void _lock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_lock_file');
  late final __lock_file =
      __lock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void _unlock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_unlock_file');
  late final __unlock_file =
      __unlock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _fclose_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fclose_nolock');
  late final __fclose_nolock =
      __fclose_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fflush_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fflush_nolock');
  late final __fflush_nolock =
      __fflush_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fgetc_nolock');
  late final __fgetc_nolock =
      __fgetc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_fputc_nolock');
  late final __fputc_nolock =
      __fputc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock');
  late final __fread_nolock = __fread_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock_s');
  late final __fread_nolock_s = __fread_nolock_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int _fseek_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('_fseek_nolock');
  late final __fseek_nolock =
      __fseek_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64_nolock');
  late final __fseeki64_nolock = __fseeki64_nolockPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _ftell_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          '_ftell_nolock');
  late final __ftell_nolock =
      __ftell_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64_nolock');
  late final __ftelli64_nolock =
      __ftelli64_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fwrite_nolock');
  late final __fwrite_nolock = __fwrite_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _getc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_getc_nolock');
  late final __getc_nolock =
      __getc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putc_nolock');
  late final __putc_nolock =
      __putc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_ungetc_nolock');
  late final __ungetc_nolock =
      __ungetc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__commode');
  late final ___p__commode =
      ___p__commodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf');
  late final ___stdio_common_vfprintf = ___stdio_common_vfprintfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_s');
  late final ___stdio_common_vfprintf_s =
      ___stdio_common_vfprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_p');
  late final ___stdio_common_vfprintf_p =
      ___stdio_common_vfprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_printf_count_output');
  late final __set_printf_count_output =
      __set_printf_count_outputPtr.asFunction<int Function(int)>();

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          '_get_printf_count_output');
  late final __get_printf_count_output =
      __get_printf_count_outputPtr.asFunction<int Function()>();

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfscanf');
  late final ___stdio_common_vfscanf = ___stdio_common_vfscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf');
  late final ___stdio_common_vsprintf = ___stdio_common_vsprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_s');
  late final ___stdio_common_vsprintf_s =
      ___stdio_common_vsprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsnprintf_s');
  late final ___stdio_common_vsnprintf_s =
      ___stdio_common_vsnprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_p');
  late final ___stdio_common_vsprintf_p =
      ___stdio_common_vsprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsscanf');
  late final ___stdio_common_vsscanf = ___stdio_common_vsscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> _Directory,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return _tempnam1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam1 = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fcloseall() {
    return _fcloseall1();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fcloseall');
  late final _fcloseall1 = _fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Format,
  ) {
    return _fdopen1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen1 = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fgetchar() {
    return _fgetchar1();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fgetchar');
  late final _fgetchar1 = _fgetcharPtr.asFunction<int Function()>();

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno1(
      _Stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno1 =
      _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall() {
    return _flushall1();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('flushall');
  late final _flushall1 = _flushallPtr.asFunction<int Function()>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar1(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fputchar');
  late final _fputchar1 = _fputcharPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw1(
      _Stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw1 = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw1(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw1 =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int rmtmp() {
    return _rmtmp1();
  }

  late final _rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rmtmp');
  late final _rmtmp1 = _rmtmpPtr.asFunction<int Function()>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef errno_t = ffi.Int;

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef wint_t = ffi.UnsignedShort;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef rsize_t = ffi.Size;
typedef fpos_t = ffi.LongLong;

abstract class GDExtensionVariantType {
  static const int GDEXTENSION_VARIANT_TYPE_NIL = 0;
  static const int GDEXTENSION_VARIANT_TYPE_BOOL = 1;
  static const int GDEXTENSION_VARIANT_TYPE_INT = 2;
  static const int GDEXTENSION_VARIANT_TYPE_FLOAT = 3;
  static const int GDEXTENSION_VARIANT_TYPE_STRING = 4;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR2 = 5;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR2I = 6;
  static const int GDEXTENSION_VARIANT_TYPE_RECT2 = 7;
  static const int GDEXTENSION_VARIANT_TYPE_RECT2I = 8;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR3 = 9;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR3I = 10;
  static const int GDEXTENSION_VARIANT_TYPE_TRANSFORM2D = 11;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR4 = 12;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR4I = 13;
  static const int GDEXTENSION_VARIANT_TYPE_PLANE = 14;
  static const int GDEXTENSION_VARIANT_TYPE_QUATERNION = 15;
  static const int GDEXTENSION_VARIANT_TYPE_AABB = 16;
  static const int GDEXTENSION_VARIANT_TYPE_BASIS = 17;
  static const int GDEXTENSION_VARIANT_TYPE_TRANSFORM3D = 18;
  static const int GDEXTENSION_VARIANT_TYPE_PROJECTION = 19;
  static const int GDEXTENSION_VARIANT_TYPE_COLOR = 20;
  static const int GDEXTENSION_VARIANT_TYPE_STRING_NAME = 21;
  static const int GDEXTENSION_VARIANT_TYPE_NODE_PATH = 22;
  static const int GDEXTENSION_VARIANT_TYPE_RID = 23;
  static const int GDEXTENSION_VARIANT_TYPE_OBJECT = 24;
  static const int GDEXTENSION_VARIANT_TYPE_CALLABLE = 25;
  static const int GDEXTENSION_VARIANT_TYPE_SIGNAL = 26;
  static const int GDEXTENSION_VARIANT_TYPE_DICTIONARY = 27;
  static const int GDEXTENSION_VARIANT_TYPE_ARRAY = 28;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY = 29;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY = 30;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY = 31;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY = 32;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY = 33;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY = 34;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY = 35;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY = 36;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY = 37;
  static const int GDEXTENSION_VARIANT_TYPE_VARIANT_MAX = 38;
}

abstract class GDExtensionVariantOperator {
  static const int GDEXTENSION_VARIANT_OP_EQUAL = 0;
  static const int GDEXTENSION_VARIANT_OP_NOT_EQUAL = 1;
  static const int GDEXTENSION_VARIANT_OP_LESS = 2;
  static const int GDEXTENSION_VARIANT_OP_LESS_EQUAL = 3;
  static const int GDEXTENSION_VARIANT_OP_GREATER = 4;
  static const int GDEXTENSION_VARIANT_OP_GREATER_EQUAL = 5;
  static const int GDEXTENSION_VARIANT_OP_ADD = 6;
  static const int GDEXTENSION_VARIANT_OP_SUBTRACT = 7;
  static const int GDEXTENSION_VARIANT_OP_MULTIPLY = 8;
  static const int GDEXTENSION_VARIANT_OP_DIVIDE = 9;
  static const int GDEXTENSION_VARIANT_OP_NEGATE = 10;
  static const int GDEXTENSION_VARIANT_OP_POSITIVE = 11;
  static const int GDEXTENSION_VARIANT_OP_MODULE = 12;
  static const int GDEXTENSION_VARIANT_OP_POWER = 13;
  static const int GDEXTENSION_VARIANT_OP_SHIFT_LEFT = 14;
  static const int GDEXTENSION_VARIANT_OP_SHIFT_RIGHT = 15;
  static const int GDEXTENSION_VARIANT_OP_BIT_AND = 16;
  static const int GDEXTENSION_VARIANT_OP_BIT_OR = 17;
  static const int GDEXTENSION_VARIANT_OP_BIT_XOR = 18;
  static const int GDEXTENSION_VARIANT_OP_BIT_NEGATE = 19;
  static const int GDEXTENSION_VARIANT_OP_AND = 20;
  static const int GDEXTENSION_VARIANT_OP_OR = 21;
  static const int GDEXTENSION_VARIANT_OP_XOR = 22;
  static const int GDEXTENSION_VARIANT_OP_NOT = 23;
  static const int GDEXTENSION_VARIANT_OP_IN = 24;
  static const int GDEXTENSION_VARIANT_OP_MAX = 25;
}

abstract class GDExtensionCallErrorType {
  static const int GDEXTENSION_CALL_OK = 0;
  static const int GDEXTENSION_CALL_ERROR_INVALID_METHOD = 1;
  static const int GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT = 2;
  static const int GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS = 3;
  static const int GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS = 4;
  static const int GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL = 5;
  static const int GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST = 6;
}

class GDExtensionCallError extends ffi.Struct {
  @ffi.Int32()
  external int error;

  @ffi.Int32()
  external int argument;

  @ffi.Int32()
  external int expected;
}

class GDExtensionInstanceBindingCallbacks extends ffi.Struct {
  external GDExtensionInstanceBindingCreateCallback create_callback;

  external GDExtensionInstanceBindingFreeCallback free_callback;

  external GDExtensionInstanceBindingReferenceCallback reference_callback;
}

typedef GDExtensionInstanceBindingCreateCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef GDExtensionInstanceBindingFreeCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef GDExtensionInstanceBindingReferenceCallback = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, GDExtensionBool)>>;
typedef GDExtensionBool = ffi.Uint8;

class GDExtensionPropertyInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external GDExtensionStringNamePtr name;

  external GDExtensionStringNamePtr class_name;

  @ffi.Uint32()
  external int hint;

  external GDExtensionStringPtr hint_string;

  @ffi.Uint32()
  external int usage;
}

typedef GDExtensionStringNamePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionStringPtr = ffi.Pointer<ffi.Void>;

class GDExtensionMethodInfo extends ffi.Struct {
  external GDExtensionStringNamePtr name;

  external GDExtensionPropertyInfo return_value;

  @ffi.Uint32()
  external int flags;

  @ffi.Int32()
  external int id;

  @ffi.Uint32()
  external int argument_count;

  external ffi.Pointer<GDExtensionPropertyInfo> arguments;

  @ffi.Uint32()
  external int default_argument_count;

  external ffi.Pointer<GDExtensionVariantPtr> default_arguments;
}

typedef GDExtensionVariantPtr = ffi.Pointer<ffi.Void>;

class GDExtensionClassCreationInfo extends ffi.Struct {
  @GDExtensionBool()
  external int is_virtual;

  @GDExtensionBool()
  external int is_abstract;

  external GDExtensionClassSet set_func;

  external GDExtensionClassGet get_func;

  external GDExtensionClassGetPropertyList get_property_list_func;

  external GDExtensionClassFreePropertyList free_property_list_func;

  external GDExtensionClassPropertyCanRevert property_can_revert_func;

  external GDExtensionClassPropertyGetRevert property_get_revert_func;

  external GDExtensionClassNotification notification_func;

  external GDExtensionClassToString to_string_func;

  external GDExtensionClassReference reference_func;

  external GDExtensionClassUnreference unreference_func;

  external GDExtensionClassCreateInstance create_instance_func;

  external GDExtensionClassFreeInstance free_instance_func;

  external GDExtensionClassGetVirtual get_virtual_func;

  external GDExtensionClassGetRID get_rid_func;

  external ffi.Pointer<ffi.Void> class_userdata;
}

typedef GDExtensionClassSet = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionClassInstancePtr,
            GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr)>>;
typedef GDExtensionClassInstancePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstStringNamePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstVariantPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassGet = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionClassInstancePtr,
            GDExtensionConstStringNamePtr, GDExtensionVariantPtr)>>;
typedef GDExtensionClassGetPropertyList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<GDExtensionPropertyInfo> Function(
            GDExtensionClassInstancePtr, ffi.Pointer<ffi.Uint32>)>>;
typedef GDExtensionClassFreePropertyList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionClassInstancePtr,
            ffi.Pointer<GDExtensionPropertyInfo>)>>;
typedef GDExtensionClassPropertyCanRevert = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(
            GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr)>>;
typedef GDExtensionClassPropertyGetRevert = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionClassInstancePtr,
            GDExtensionConstStringNamePtr, GDExtensionVariantPtr)>>;
typedef GDExtensionClassNotification = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionClassInstancePtr, ffi.Int32)>>;
typedef GDExtensionClassToString = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionClassInstancePtr,
            ffi.Pointer<GDExtensionBool>, GDExtensionStringPtr)>>;
typedef GDExtensionClassReference = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(GDExtensionClassInstancePtr)>>;
typedef GDExtensionClassUnreference = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(GDExtensionClassInstancePtr)>>;
typedef GDExtensionClassCreateInstance = ffi.Pointer<
    ffi.NativeFunction<GDExtensionObjectPtr Function(ffi.Pointer<ffi.Void>)>>;
typedef GDExtensionObjectPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassFreeInstance = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, GDExtensionClassInstancePtr)>>;
typedef GDExtensionClassGetVirtual = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionClassCallVirtual Function(
            ffi.Pointer<ffi.Void>, GDExtensionConstStringNamePtr)>>;
typedef GDExtensionClassCallVirtual = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionClassInstancePtr,
            ffi.Pointer<GDExtensionConstTypePtr>, GDExtensionTypePtr)>>;
typedef GDExtensionConstTypePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionTypePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassGetRID = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint64 Function(GDExtensionClassInstancePtr)>>;

abstract class GDExtensionClassMethodFlags {
  static const int GDEXTENSION_METHOD_FLAG_NORMAL = 1;
  static const int GDEXTENSION_METHOD_FLAG_EDITOR = 2;
  static const int GDEXTENSION_METHOD_FLAG_CONST = 4;
  static const int GDEXTENSION_METHOD_FLAG_VIRTUAL = 8;
  static const int GDEXTENSION_METHOD_FLAG_VARARG = 16;
  static const int GDEXTENSION_METHOD_FLAG_STATIC = 32;
  static const int GDEXTENSION_METHOD_FLAGS_DEFAULT = 1;
}

abstract class GDExtensionClassMethodArgumentMetadata {
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE = 0;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8 = 1;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16 = 2;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32 = 3;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64 = 4;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8 = 5;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16 = 6;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32 = 7;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64 = 8;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT = 9;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE = 10;
}

class GDExtensionClassMethodInfo extends ffi.Struct {
  external GDExtensionStringNamePtr name;

  external ffi.Pointer<ffi.Void> method_userdata;

  external GDExtensionClassMethodCall call_func;

  external GDExtensionClassMethodPtrCall ptrcall_func;

  @ffi.Uint32()
  external int method_flags;

  @GDExtensionBool()
  external int has_return_value;

  external ffi.Pointer<GDExtensionPropertyInfo> return_value_info;

  @ffi.Int32()
  external int return_value_metadata;

  @ffi.Uint32()
  external int argument_count;

  external ffi.Pointer<GDExtensionPropertyInfo> arguments_info;

  external ffi.Pointer<ffi.Int32> arguments_metadata;

  @ffi.Uint32()
  external int default_argument_count;

  external ffi.Pointer<GDExtensionVariantPtr> default_arguments;
}

typedef GDExtensionClassMethodCall = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            GDExtensionClassInstancePtr,
            ffi.Pointer<GDExtensionConstVariantPtr>,
            GDExtensionInt,
            GDExtensionVariantPtr,
            ffi.Pointer<GDExtensionCallError>)>>;
typedef GDExtensionInt = ffi.Int64;
typedef GDExtensionClassMethodPtrCall = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, GDExtensionClassInstancePtr,
            ffi.Pointer<GDExtensionConstTypePtr>, GDExtensionTypePtr)>>;

class GDExtensionScriptInstanceInfo extends ffi.Struct {
  external GDExtensionScriptInstanceSet set_func;

  external GDExtensionScriptInstanceGet get_func;

  external GDExtensionScriptInstanceGetPropertyList get_property_list_func;

  external GDExtensionScriptInstanceFreePropertyList free_property_list_func;

  external GDExtensionScriptInstancePropertyCanRevert property_can_revert_func;

  external GDExtensionScriptInstancePropertyGetRevert property_get_revert_func;

  external GDExtensionScriptInstanceGetOwner get_owner_func;

  external GDExtensionScriptInstanceGetPropertyState get_property_state_func;

  external GDExtensionScriptInstanceGetMethodList get_method_list_func;

  external GDExtensionScriptInstanceFreeMethodList free_method_list_func;

  external GDExtensionScriptInstanceGetPropertyType get_property_type_func;

  external GDExtensionScriptInstanceHasMethod has_method_func;

  external GDExtensionScriptInstanceCall call_func;

  external GDExtensionScriptInstanceNotification notification_func;

  external GDExtensionScriptInstanceToString to_string_func;

  external GDExtensionScriptInstanceRefCountIncremented
      refcount_incremented_func;

  external GDExtensionScriptInstanceRefCountDecremented
      refcount_decremented_func;

  external GDExtensionScriptInstanceGetScript get_script_func;

  external GDExtensionScriptInstanceIsPlaceholder is_placeholder_func;

  external GDExtensionScriptInstanceSet set_fallback_func;

  external GDExtensionScriptInstanceGet get_fallback_func;

  external GDExtensionScriptInstanceGetLanguage get_language_func;

  external GDExtensionScriptInstanceFree free_func;
}

typedef GDExtensionScriptInstanceSet = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionScriptInstanceDataPtr,
            GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr)>>;
typedef GDExtensionScriptInstanceDataPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstanceGet = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionScriptInstanceDataPtr,
            GDExtensionConstStringNamePtr, GDExtensionVariantPtr)>>;
typedef GDExtensionScriptInstanceGetPropertyList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<GDExtensionPropertyInfo> Function(
            GDExtensionScriptInstanceDataPtr, ffi.Pointer<ffi.Uint32>)>>;
typedef GDExtensionScriptInstanceFreePropertyList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionScriptInstanceDataPtr,
            ffi.Pointer<GDExtensionPropertyInfo>)>>;
typedef GDExtensionScriptInstancePropertyCanRevert = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(
            GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr)>>;
typedef GDExtensionScriptInstancePropertyGetRevert = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionScriptInstanceDataPtr,
            GDExtensionConstStringNamePtr, GDExtensionVariantPtr)>>;
typedef GDExtensionScriptInstanceGetOwner = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionObjectPtr Function(GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptInstanceGetPropertyState = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionScriptInstanceDataPtr,
            GDExtensionScriptInstancePropertyStateAdd, ffi.Pointer<ffi.Void>)>>;
typedef GDExtensionScriptInstancePropertyStateAdd = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionConstStringNamePtr,
            GDExtensionConstVariantPtr, ffi.Pointer<ffi.Void>)>>;
typedef GDExtensionScriptInstanceGetMethodList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<GDExtensionMethodInfo> Function(
            GDExtensionScriptInstanceDataPtr, ffi.Pointer<ffi.Uint32>)>>;
typedef GDExtensionScriptInstanceFreeMethodList = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionScriptInstanceDataPtr,
            ffi.Pointer<GDExtensionMethodInfo>)>>;
typedef GDExtensionScriptInstanceGetPropertyType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(GDExtensionScriptInstanceDataPtr,
            GDExtensionConstStringNamePtr, ffi.Pointer<GDExtensionBool>)>>;
typedef GDExtensionScriptInstanceHasMethod = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(
            GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr)>>;
typedef GDExtensionScriptInstanceCall = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            GDExtensionScriptInstanceDataPtr,
            GDExtensionConstStringNamePtr,
            ffi.Pointer<GDExtensionConstVariantPtr>,
            GDExtensionInt,
            GDExtensionVariantPtr,
            ffi.Pointer<GDExtensionCallError>)>>;
typedef GDExtensionScriptInstanceNotification = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionScriptInstanceDataPtr, ffi.Int32)>>;
typedef GDExtensionScriptInstanceToString = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionScriptInstanceDataPtr,
            ffi.Pointer<GDExtensionBool>, GDExtensionStringPtr)>>;
typedef GDExtensionScriptInstanceRefCountIncremented = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptInstanceRefCountDecremented = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptInstanceGetScript = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionObjectPtr Function(GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptInstanceIsPlaceholder = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionBool Function(GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptInstanceGetLanguage = ffi.Pointer<
    ffi.NativeFunction<
        GDExtensionScriptLanguagePtr Function(
            GDExtensionScriptInstanceDataPtr)>>;
typedef GDExtensionScriptLanguagePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstanceFree = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(GDExtensionScriptInstanceDataPtr)>>;

class GDExtensionInterface extends ffi.Struct {
  @ffi.Uint32()
  external int version_major;

  @ffi.Uint32()
  external int version_minor;

  @ffi.Uint32()
  external int version_patch;

  external ffi.Pointer<ffi.Char> version_string;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
      mem_alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      mem_realloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      mem_free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>> print_error;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>> print_warning;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>> print_script_error;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint64 Function(GDExtensionConstStringNamePtr)>>
      get_native_struct_size;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionVariantPtr, GDExtensionConstVariantPtr)>>
      variant_new_copy;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(GDExtensionVariantPtr)>>
      variant_new_nil;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(GDExtensionVariantPtr)>>
      variant_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              GDExtensionInt,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionCallError>)>> variant_call;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              GDExtensionInt,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionCallError>)>> variant_call_static;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_evaluate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_set;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionConstStringNamePtr,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_set_named;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_set_keyed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionInt,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>,
              ffi.Pointer<GDExtensionBool>)>> variant_set_indexed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_get;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionConstStringNamePtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_get_named;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_get_keyed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionInt,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>,
              ffi.Pointer<GDExtensionBool>)>> variant_get_indexed;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionBool Function(
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_iter_init;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionBool Function(
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_iter_next;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionVariantPtr,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_iter_get;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstVariantPtr)>> variant_hash;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionInt Function(
                  GDExtensionConstVariantPtr, GDExtensionInt)>>
      variant_recursive_hash;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionBool Function(
                  GDExtensionConstVariantPtr, GDExtensionConstVariantPtr)>>
      variant_hash_compare;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionBool Function(GDExtensionConstVariantPtr)>>
      variant_booleanize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionConstVariantPtr, GDExtensionVariantPtr,
              GDExtensionBool)>> variant_duplicate;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionConstVariantPtr, GDExtensionStringPtr)>>
      variant_stringify;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(GDExtensionConstVariantPtr)>>
      variant_get_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionBool Function(
                  GDExtensionConstVariantPtr, GDExtensionConstStringNamePtr)>>
      variant_has_method;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionBool Function(
              ffi.Int32, GDExtensionConstStringNamePtr)>> variant_has_member;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionBool Function(
              GDExtensionConstVariantPtr,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>)>> variant_has_key;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, GDExtensionStringPtr)>>
      variant_get_type_name;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionBool Function(ffi.Int32, ffi.Int32)>>
      variant_can_convert;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionBool Function(ffi.Int32, ffi.Int32)>>
      variant_can_convert_strict;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionVariantFromTypeConstructorFunc Function(ffi.Int32)>>
      get_variant_from_type_constructor;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypeFromVariantConstructorFunc Function(ffi.Int32)>>
      get_variant_to_type_constructor;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrOperatorEvaluator Function(
                  ffi.Int32, ffi.Int32, ffi.Int32)>>
      variant_get_ptr_operator_evaluator;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrBuiltInMethod Function(
                  ffi.Int32, GDExtensionConstStringNamePtr, GDExtensionInt)>>
      variant_get_ptr_builtin_method;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrConstructor Function(ffi.Int32, ffi.Int32)>>
      variant_get_ptr_constructor;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrDestructor Function(ffi.Int32)>>
      variant_get_ptr_destructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              ffi.Int32,
              ffi.Pointer<GDExtensionCallError>)>> variant_construct;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrSetter Function(
                  ffi.Int32, GDExtensionConstStringNamePtr)>>
      variant_get_ptr_setter;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrGetter Function(
                  ffi.Int32, GDExtensionConstStringNamePtr)>>
      variant_get_ptr_getter;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrIndexedSetter Function(ffi.Int32)>>
      variant_get_ptr_indexed_setter;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrIndexedGetter Function(ffi.Int32)>>
      variant_get_ptr_indexed_getter;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrKeyedSetter Function(ffi.Int32)>>
      variant_get_ptr_keyed_setter;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrKeyedGetter Function(ffi.Int32)>>
      variant_get_ptr_keyed_getter;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionPtrKeyedChecker Function(ffi.Int32)>>
      variant_get_ptr_keyed_checker;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, GDExtensionConstStringNamePtr,
              GDExtensionVariantPtr)>> variant_get_constant_value;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionPtrUtilityFunction Function(
                  GDExtensionConstStringNamePtr, GDExtensionInt)>>
      variant_get_ptr_utility_function;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.Char>)>>
      string_new_with_latin1_chars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.Char>)>>
      string_new_with_utf8_chars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<char16_t>)>>
      string_new_with_utf16_chars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<char32_t>)>>
      string_new_with_utf32_chars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.WChar>)>>
      string_new_with_wide_chars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionStringPtr, ffi.Pointer<ffi.Char>, GDExtensionInt)>>
      string_new_with_latin1_chars_and_len;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionStringPtr, ffi.Pointer<ffi.Char>, GDExtensionInt)>>
      string_new_with_utf8_chars_and_len;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionStringPtr, ffi.Pointer<char16_t>, GDExtensionInt)>>
      string_new_with_utf16_chars_and_len;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionStringPtr, ffi.Pointer<char32_t>, GDExtensionInt)>>
      string_new_with_utf32_chars_and_len;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.WChar>,
              GDExtensionInt)>> string_new_with_wide_chars_and_len;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstStringPtr,
              ffi.Pointer<ffi.Char>, GDExtensionInt)>> string_to_latin1_chars;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstStringPtr,
              ffi.Pointer<ffi.Char>, GDExtensionInt)>> string_to_utf8_chars;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstStringPtr,
              ffi.Pointer<char16_t>, GDExtensionInt)>> string_to_utf16_chars;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstStringPtr,
              ffi.Pointer<char32_t>, GDExtensionInt)>> string_to_utf32_chars;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionInt Function(GDExtensionConstStringPtr,
              ffi.Pointer<ffi.WChar>, GDExtensionInt)>> string_to_wide_chars;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<char32_t> Function(
              GDExtensionStringPtr, GDExtensionInt)>> string_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<char32_t> Function(
                  GDExtensionConstStringPtr, GDExtensionInt)>>
      string_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionStringPtr, GDExtensionConstStringPtr)>>
      string_operator_plus_eq_string;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(GDExtensionStringPtr, char32_t)>>
      string_operator_plus_eq_char;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.Char>)>>
      string_operator_plus_eq_cstr;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<ffi.WChar>)>>
      string_operator_plus_eq_wcstr;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionStringPtr, ffi.Pointer<char32_t>)>>
      string_operator_plus_eq_c32str;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionInt Function(
                  GDExtensionObjectPtr, ffi.Pointer<ffi.Uint8>, ffi.Size)>>
      xml_parser_open_buffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionObjectPtr, ffi.Pointer<ffi.Uint8>, ffi.Uint64)>>
      file_access_store_buffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint64 Function(GDExtensionConstObjectPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>> file_access_get_buffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int64 Function(
                  GDExtensionObjectPtr,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int,
                  ffi.Int,
                  GDExtensionBool,
                  GDExtensionConstStringPtr)>>
      worker_thread_pool_add_native_group_task;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int64 Function(
              GDExtensionObjectPtr,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              GDExtensionBool,
              GDExtensionConstStringPtr)>> worker_thread_pool_add_native_task;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Uint8> Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_byte_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Uint8> Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_byte_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(GDExtensionTypePtr, GDExtensionInt)>>
      packed_color_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_color_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_float32_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_float32_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Double> Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_float64_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Double> Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_float64_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int32> Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_int32_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int32> Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_int32_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int64> Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_int64_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int64> Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_int64_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionStringPtr Function(
                  GDExtensionTypePtr, GDExtensionInt)>>
      packed_string_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionStringPtr Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_string_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(GDExtensionTypePtr, GDExtensionInt)>>
      packed_vector2_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_vector2_array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(GDExtensionTypePtr, GDExtensionInt)>>
      packed_vector3_array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionTypePtr Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      packed_vector3_array_operator_index_const;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionVariantPtr Function(
              GDExtensionTypePtr, GDExtensionInt)>> array_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionVariantPtr Function(
                  GDExtensionConstTypePtr, GDExtensionInt)>>
      array_operator_index_const;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionTypePtr, GDExtensionConstTypePtr)>>
      array_ref;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionTypePtr,
              ffi.Uint32,
              GDExtensionConstStringNamePtr,
              GDExtensionConstVariantPtr)>> array_set_typed;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionVariantPtr Function(
                  GDExtensionTypePtr, GDExtensionConstVariantPtr)>>
      dictionary_operator_index;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionVariantPtr Function(
                  GDExtensionConstTypePtr, GDExtensionConstVariantPtr)>>
      dictionary_operator_index_const;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionMethodBindPtr,
              GDExtensionObjectPtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              GDExtensionInt,
              GDExtensionVariantPtr,
              ffi.Pointer<GDExtensionCallError>)>> object_method_bind_call;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionMethodBindPtr,
              GDExtensionObjectPtr,
              ffi.Pointer<GDExtensionConstTypePtr>,
              GDExtensionTypePtr)>> object_method_bind_ptrcall;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(GDExtensionObjectPtr)>>
      object_destroy;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionObjectPtr Function(GDExtensionConstStringNamePtr)>>
      global_get_singleton;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  GDExtensionObjectPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>>
      object_get_instance_binding;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionObjectPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>>
      object_set_instance_binding;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionObjectPtr, GDExtensionConstStringNamePtr,
              GDExtensionClassInstancePtr)>> object_set_instance;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionObjectPtr Function(
                  GDExtensionConstObjectPtr, ffi.Pointer<ffi.Void>)>>
      object_cast_to;

  external ffi.Pointer<
          ffi.NativeFunction<GDExtensionObjectPtr Function(GDObjectInstanceID)>>
      object_get_instance_from_id;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDObjectInstanceID Function(GDExtensionConstObjectPtr)>>
      object_get_instance_id;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionObjectPtr Function(GDExtensionConstRefPtr)>>
      ref_get_object;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(GDExtensionRefPtr, GDExtensionObjectPtr)>>
      ref_set_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionScriptInstancePtr Function(
              ffi.Pointer<GDExtensionScriptInstanceInfo>,
              GDExtensionScriptInstanceDataPtr)>> script_instance_create;

  external ffi.Pointer<
          ffi.NativeFunction<
              GDExtensionObjectPtr Function(GDExtensionConstStringNamePtr)>>
      classdb_construct_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          GDExtensionMethodBindPtr Function(
              GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr,
              GDExtensionInt)>> classdb_get_method_bind;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(GDExtensionConstStringNamePtr)>>
      classdb_get_class_tag;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionClassCreationInfo>)>>
      classdb_register_extension_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionClassMethodInfo>)>>
      classdb_register_extension_class_method;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionInt,
                  GDExtensionBool)>>
      classdb_register_extension_class_integer_constant;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionPropertyInfo>,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr)>>
      classdb_register_extension_class_property;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringPtr,
                  GDExtensionConstStringPtr)>>
      classdb_register_extension_class_property_group;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringPtr,
                  GDExtensionConstStringPtr)>>
      classdb_register_extension_class_property_subgroup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionClassLibraryPtr,
              GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionPropertyInfo>,
              GDExtensionInt)>> classdb_register_extension_class_signal;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr)>>
      classdb_unregister_extension_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr, GDExtensionStringPtr)>>
      get_library_path;
}

typedef GDExtensionVariantFromTypeConstructorFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionVariantPtr, GDExtensionTypePtr)>>;
typedef GDExtensionTypeFromVariantConstructorFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionTypePtr, GDExtensionVariantPtr)>>;
typedef GDExtensionPtrOperatorEvaluator = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionConstTypePtr, GDExtensionConstTypePtr,
            GDExtensionTypePtr)>>;
typedef GDExtensionPtrBuiltInMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            GDExtensionTypePtr,
            ffi.Pointer<GDExtensionConstTypePtr>,
            GDExtensionTypePtr,
            ffi.Int)>>;
typedef GDExtensionPtrConstructor = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            GDExtensionTypePtr, ffi.Pointer<GDExtensionConstTypePtr>)>>;
typedef GDExtensionPtrDestructor
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GDExtensionTypePtr)>>;
typedef GDExtensionPtrSetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionTypePtr, GDExtensionConstTypePtr)>>;
typedef GDExtensionPtrGetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionConstTypePtr, GDExtensionTypePtr)>>;
typedef GDExtensionPtrIndexedSetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            GDExtensionTypePtr, GDExtensionInt, GDExtensionConstTypePtr)>>;
typedef GDExtensionPtrIndexedGetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            GDExtensionConstTypePtr, GDExtensionInt, GDExtensionTypePtr)>>;
typedef GDExtensionPtrKeyedSetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionTypePtr, GDExtensionConstTypePtr,
            GDExtensionConstTypePtr)>>;
typedef GDExtensionPtrKeyedGetter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionConstTypePtr, GDExtensionConstTypePtr,
            GDExtensionTypePtr)>>;
typedef GDExtensionPtrKeyedChecker = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint32 Function(
            GDExtensionConstVariantPtr, GDExtensionConstVariantPtr)>>;
typedef GDExtensionPtrUtilityFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GDExtensionTypePtr,
            ffi.Pointer<GDExtensionConstTypePtr>, ffi.Int)>>;
typedef char16_t = ffi.Uint16;
typedef char32_t = ffi.Uint32;
typedef GDExtensionConstStringPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstObjectPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionMethodBindPtr = ffi.Pointer<ffi.Void>;
typedef GDObjectInstanceID = ffi.Uint64;
typedef GDExtensionConstRefPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionRefPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstancePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassLibraryPtr = ffi.Pointer<ffi.Void>;

abstract class GDExtensionInitializationLevel {
  static const int GDEXTENSION_INITIALIZATION_CORE = 0;
  static const int GDEXTENSION_INITIALIZATION_SERVERS = 1;
  static const int GDEXTENSION_INITIALIZATION_SCENE = 2;
  static const int GDEXTENSION_INITIALIZATION_EDITOR = 3;
  static const int GDEXTENSION_MAX_INITIALIZATION_LEVEL = 4;
}

class GDExtensionInitialization extends ffi.Struct {
  @ffi.Int32()
  external int minimum_initialization_level;

  external ffi.Pointer<ffi.Void> userdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>> initialize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>> deinitialize;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;
