// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class GDExtensionFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GDExtensionFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GDExtensionFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void gde_init_c_interface(
    GDExtensionInterfaceGetProcAddress p_get_proc_address,
  ) {
    return _gde_init_c_interface(
      p_get_proc_address,
    );
  }

  late final _gde_init_c_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionInterfaceGetProcAddress)>>('gde_init_c_interface');
  late final _gde_init_c_interface = _gde_init_c_interfacePtr
      .asFunction<void Function(GDExtensionInterfaceGetProcAddress)>();

  void gde_get_library_path(
    GDExtensionClassLibraryPtr p_library,
    GDExtensionUninitializedStringPtr r_path,
  ) {
    return _gde_get_library_path(
      p_library,
      r_path,
    );
  }

  late final _gde_get_library_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionClassLibraryPtr,
              GDExtensionUninitializedStringPtr)>>('gde_get_library_path');
  late final _gde_get_library_path = _gde_get_library_pathPtr.asFunction<
      void Function(
          GDExtensionClassLibraryPtr, GDExtensionUninitializedStringPtr)>();

  void gde_print_error(
    ffi.Pointer<ffi.Char> p_description,
    ffi.Pointer<ffi.Char> p_function,
    ffi.Pointer<ffi.Char> p_file,
    int p_line,
    int p_editor_notify,
  ) {
    return _gde_print_error(
      p_description,
      p_function,
      p_file,
      p_line,
      p_editor_notify,
    );
  }

  late final _gde_print_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GDExtensionBool)>>('gde_print_error');
  late final _gde_print_error = _gde_print_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  void gde_print_warning(
    ffi.Pointer<ffi.Char> p_description,
    ffi.Pointer<ffi.Char> p_function,
    ffi.Pointer<ffi.Char> p_file,
    int p_line,
    int p_editor_notify,
  ) {
    return _gde_print_warning(
      p_description,
      p_function,
      p_file,
      p_line,
      p_editor_notify,
    );
  }

  late final _gde_print_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GDExtensionBool)>>('gde_print_warning');
  late final _gde_print_warning = _gde_print_warningPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Void> gde_mem_alloc(
    int p_bytes,
  ) {
    return _gde_mem_alloc(
      p_bytes,
    );
  }

  late final _gde_mem_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'gde_mem_alloc');
  late final _gde_mem_alloc =
      _gde_mem_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void gde_mem_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _gde_mem_free(
      ptr,
    );
  }

  late final _gde_mem_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'gde_mem_free');
  late final _gde_mem_free =
      _gde_mem_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void gde_variant_destroy(
    GDExtensionVariantPtr p_self,
  ) {
    return _gde_variant_destroy(
      p_self,
    );
  }

  late final _gde_variant_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GDExtensionVariantPtr)>>(
          'gde_variant_destroy');
  late final _gde_variant_destroy = _gde_variant_destroyPtr
      .asFunction<void Function(GDExtensionVariantPtr)>();

  GDExtensionPtrConstructor gde_variant_get_ptr_constructor(
    int p_type,
    int p_constructor,
  ) {
    return _gde_variant_get_ptr_constructor(
      p_type,
      p_constructor,
    );
  }

  late final _gde_variant_get_ptr_constructorPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionPtrConstructor Function(
              ffi.Int32, ffi.Int32)>>('gde_variant_get_ptr_constructor');
  late final _gde_variant_get_ptr_constructor =
      _gde_variant_get_ptr_constructorPtr
          .asFunction<GDExtensionPtrConstructor Function(int, int)>();

  GDExtensionPtrDestructor gde_variant_get_ptr_destructor(
    int p_type,
  ) {
    return _gde_variant_get_ptr_destructor(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_destructorPtr =
      _lookup<ffi.NativeFunction<GDExtensionPtrDestructor Function(ffi.Int32)>>(
          'gde_variant_get_ptr_destructor');
  late final _gde_variant_get_ptr_destructor =
      _gde_variant_get_ptr_destructorPtr
          .asFunction<GDExtensionPtrDestructor Function(int)>();

  void gde_variant_new_copy(
    GDExtensionUninitializedVariantPtr r_dest,
    GDExtensionConstVariantPtr p_src,
  ) {
    return _gde_variant_new_copy(
      r_dest,
      p_src,
    );
  }

  late final _gde_variant_new_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionUninitializedVariantPtr,
              GDExtensionConstVariantPtr)>>('gde_variant_new_copy');
  late final _gde_variant_new_copy = _gde_variant_new_copyPtr.asFunction<
      void Function(
          GDExtensionUninitializedVariantPtr, GDExtensionConstVariantPtr)>();

  void gde_variant_new_nil(
    GDExtensionUninitializedVariantPtr r_dest,
  ) {
    return _gde_variant_new_nil(
      r_dest,
    );
  }

  late final _gde_variant_new_nilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionUninitializedVariantPtr)>>('gde_variant_new_nil');
  late final _gde_variant_new_nil = _gde_variant_new_nilPtr
      .asFunction<void Function(GDExtensionUninitializedVariantPtr)>();

  GDExtensionPtrBuiltInMethod gde_variant_get_ptr_builtin_method(
    int p_type,
    GDExtensionConstStringNamePtr p_method,
    int p_hash,
  ) {
    return _gde_variant_get_ptr_builtin_method(
      p_type,
      p_method,
      p_hash,
    );
  }

  late final _gde_variant_get_ptr_builtin_methodPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionPtrBuiltInMethod Function(
              ffi.Int32,
              GDExtensionConstStringNamePtr,
              GDExtensionInt)>>('gde_variant_get_ptr_builtin_method');
  late final _gde_variant_get_ptr_builtin_method =
      _gde_variant_get_ptr_builtin_methodPtr.asFunction<
          GDExtensionPtrBuiltInMethod Function(
              int, GDExtensionConstStringNamePtr, int)>();

  GDExtensionVariantFromTypeConstructorFunc
      gde_get_variant_from_type_constructor(
    int p_type,
  ) {
    return _gde_get_variant_from_type_constructor(
      p_type,
    );
  }

  late final _gde_get_variant_from_type_constructorPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionVariantFromTypeConstructorFunc Function(
              ffi.Int32)>>('gde_get_variant_from_type_constructor');
  late final _gde_get_variant_from_type_constructor =
      _gde_get_variant_from_type_constructorPtr.asFunction<
          GDExtensionVariantFromTypeConstructorFunc Function(int)>();

  GDExtensionTypeFromVariantConstructorFunc gde_get_variant_to_type_constructor(
    int p_type,
  ) {
    return _gde_get_variant_to_type_constructor(
      p_type,
    );
  }

  late final _gde_get_variant_to_type_constructorPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionTypeFromVariantConstructorFunc Function(
              ffi.Int32)>>('gde_get_variant_to_type_constructor');
  late final _gde_get_variant_to_type_constructor =
      _gde_get_variant_to_type_constructorPtr.asFunction<
          GDExtensionTypeFromVariantConstructorFunc Function(int)>();

  int gde_variant_get_type(
    GDExtensionConstVariantPtr p_self,
  ) {
    return _gde_variant_get_type(
      p_self,
    );
  }

  late final _gde_variant_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(GDExtensionConstVariantPtr)>>(
      'gde_variant_get_type');
  late final _gde_variant_get_type = _gde_variant_get_typePtr
      .asFunction<int Function(GDExtensionConstVariantPtr)>();

  void gde_variant_call(
    GDExtensionVariantPtr p_self,
    GDExtensionConstStringNamePtr p_method,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    int p_argument_count,
    GDExtensionUninitializedVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error,
  ) {
    return _gde_variant_call(
      p_self,
      p_method,
      p_args,
      p_argument_count,
      r_return,
      r_error,
    );
  }

  late final _gde_variant_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              GDExtensionInt,
              GDExtensionUninitializedVariantPtr,
              ffi.Pointer<GDExtensionCallError>)>>('gde_variant_call');
  late final _gde_variant_call = _gde_variant_callPtr.asFunction<
      void Function(
          GDExtensionVariantPtr,
          GDExtensionConstStringNamePtr,
          ffi.Pointer<GDExtensionConstVariantPtr>,
          int,
          GDExtensionUninitializedVariantPtr,
          ffi.Pointer<GDExtensionCallError>)>();

  GDExtensionPtrGetter gde_variant_get_ptr_getter(
    int p_type,
    GDExtensionConstStringNamePtr p_member,
  ) {
    return _gde_variant_get_ptr_getter(
      p_type,
      p_member,
    );
  }

  late final _gde_variant_get_ptr_getterPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionPtrGetter Function(ffi.Int32,
              GDExtensionConstStringNamePtr)>>('gde_variant_get_ptr_getter');
  late final _gde_variant_get_ptr_getter =
      _gde_variant_get_ptr_getterPtr.asFunction<
          GDExtensionPtrGetter Function(int, GDExtensionConstStringNamePtr)>();

  GDExtensionPtrSetter gde_variant_get_ptr_setter(
    int p_type,
    GDExtensionConstStringNamePtr p_member,
  ) {
    return _gde_variant_get_ptr_setter(
      p_type,
      p_member,
    );
  }

  late final _gde_variant_get_ptr_setterPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionPtrSetter Function(ffi.Int32,
              GDExtensionConstStringNamePtr)>>('gde_variant_get_ptr_setter');
  late final _gde_variant_get_ptr_setter =
      _gde_variant_get_ptr_setterPtr.asFunction<
          GDExtensionPtrSetter Function(int, GDExtensionConstStringNamePtr)>();

  GDExtensionPtrIndexedGetter gde_variant_get_ptr_indexed_getter(
    int p_type,
  ) {
    return _gde_variant_get_ptr_indexed_getter(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_indexed_getterPtr = _lookup<
          ffi.NativeFunction<GDExtensionPtrIndexedGetter Function(ffi.Int32)>>(
      'gde_variant_get_ptr_indexed_getter');
  late final _gde_variant_get_ptr_indexed_getter =
      _gde_variant_get_ptr_indexed_getterPtr
          .asFunction<GDExtensionPtrIndexedGetter Function(int)>();

  GDExtensionPtrIndexedSetter gde_variant_get_ptr_indexed_setter(
    int p_type,
  ) {
    return _gde_variant_get_ptr_indexed_setter(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_indexed_setterPtr = _lookup<
          ffi.NativeFunction<GDExtensionPtrIndexedSetter Function(ffi.Int32)>>(
      'gde_variant_get_ptr_indexed_setter');
  late final _gde_variant_get_ptr_indexed_setter =
      _gde_variant_get_ptr_indexed_setterPtr
          .asFunction<GDExtensionPtrIndexedSetter Function(int)>();

  GDExtensionPtrKeyedSetter gde_variant_get_ptr_keyed_setter(
    int p_type,
  ) {
    return _gde_variant_get_ptr_keyed_setter(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_keyed_setterPtr = _lookup<
          ffi.NativeFunction<GDExtensionPtrKeyedSetter Function(ffi.Int32)>>(
      'gde_variant_get_ptr_keyed_setter');
  late final _gde_variant_get_ptr_keyed_setter =
      _gde_variant_get_ptr_keyed_setterPtr
          .asFunction<GDExtensionPtrKeyedSetter Function(int)>();

  GDExtensionPtrKeyedGetter gde_variant_get_ptr_keyed_getter(
    int p_type,
  ) {
    return _gde_variant_get_ptr_keyed_getter(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_keyed_getterPtr = _lookup<
          ffi.NativeFunction<GDExtensionPtrKeyedGetter Function(ffi.Int32)>>(
      'gde_variant_get_ptr_keyed_getter');
  late final _gde_variant_get_ptr_keyed_getter =
      _gde_variant_get_ptr_keyed_getterPtr
          .asFunction<GDExtensionPtrKeyedGetter Function(int)>();

  GDExtensionPtrKeyedChecker gde_variant_get_ptr_keyed_checker(
    int p_type,
  ) {
    return _gde_variant_get_ptr_keyed_checker(
      p_type,
    );
  }

  late final _gde_variant_get_ptr_keyed_checkerPtr = _lookup<
          ffi.NativeFunction<GDExtensionPtrKeyedChecker Function(ffi.Int32)>>(
      'gde_variant_get_ptr_keyed_checker');
  late final _gde_variant_get_ptr_keyed_checker =
      _gde_variant_get_ptr_keyed_checkerPtr
          .asFunction<GDExtensionPtrKeyedChecker Function(int)>();

  void gde_variant_get_indexed(
    GDExtensionConstVariantPtr p_self,
    int p_index,
    GDExtensionUninitializedVariantPtr r_ret,
    ffi.Pointer<GDExtensionBool> r_valid,
    ffi.Pointer<GDExtensionBool> r_oob,
  ) {
    return _gde_variant_get_indexed(
      p_self,
      p_index,
      r_ret,
      r_valid,
      r_oob,
    );
  }

  late final _gde_variant_get_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionConstVariantPtr,
              GDExtensionInt,
              GDExtensionUninitializedVariantPtr,
              ffi.Pointer<GDExtensionBool>,
              ffi.Pointer<GDExtensionBool>)>>('gde_variant_get_indexed');
  late final _gde_variant_get_indexed = _gde_variant_get_indexedPtr.asFunction<
      void Function(
          GDExtensionConstVariantPtr,
          int,
          GDExtensionUninitializedVariantPtr,
          ffi.Pointer<GDExtensionBool>,
          ffi.Pointer<GDExtensionBool>)>();

  void gde_variant_set_indexed(
    GDExtensionVariantPtr p_self,
    int p_index,
    GDExtensionConstVariantPtr p_value,
    ffi.Pointer<GDExtensionBool> r_valid,
    ffi.Pointer<GDExtensionBool> r_oob,
  ) {
    return _gde_variant_set_indexed(
      p_self,
      p_index,
      p_value,
      r_valid,
      r_oob,
    );
  }

  late final _gde_variant_set_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionVariantPtr,
              GDExtensionInt,
              GDExtensionConstVariantPtr,
              ffi.Pointer<GDExtensionBool>,
              ffi.Pointer<GDExtensionBool>)>>('gde_variant_set_indexed');
  late final _gde_variant_set_indexed = _gde_variant_set_indexedPtr.asFunction<
      void Function(GDExtensionVariantPtr, int, GDExtensionConstVariantPtr,
          ffi.Pointer<GDExtensionBool>, ffi.Pointer<GDExtensionBool>)>();

  void gde_string_new_with_utf8_chars(
    GDExtensionUninitializedStringPtr r_dest,
    ffi.Pointer<ffi.Char> p_contents,
  ) {
    return _gde_string_new_with_utf8_chars(
      r_dest,
      p_contents,
    );
  }

  late final _gde_string_new_with_utf8_charsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionUninitializedStringPtr,
              ffi.Pointer<ffi.Char>)>>('gde_string_new_with_utf8_chars');
  late final _gde_string_new_with_utf8_chars =
      _gde_string_new_with_utf8_charsPtr.asFunction<
          void Function(
              GDExtensionUninitializedStringPtr, ffi.Pointer<ffi.Char>)>();

  int gde_string_to_utf8_chars(
    GDExtensionConstStringPtr p_self,
    ffi.Pointer<ffi.Char> r_text,
    int p_max_write_length,
  ) {
    return _gde_string_to_utf8_chars(
      p_self,
      r_text,
      p_max_write_length,
    );
  }

  late final _gde_string_to_utf8_charsPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionInt Function(
              GDExtensionConstStringPtr,
              ffi.Pointer<ffi.Char>,
              GDExtensionInt)>>('gde_string_to_utf8_chars');
  late final _gde_string_to_utf8_chars =
      _gde_string_to_utf8_charsPtr.asFunction<
          int Function(
              GDExtensionConstStringPtr, ffi.Pointer<ffi.Char>, int)>();

  int gde_string_to_utf16_chars(
    GDExtensionConstStringPtr p_self,
    ffi.Pointer<char16_t> r_text,
    int p_max_write_length,
  ) {
    return _gde_string_to_utf16_chars(
      p_self,
      r_text,
      p_max_write_length,
    );
  }

  late final _gde_string_to_utf16_charsPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionInt Function(
              GDExtensionConstStringPtr,
              ffi.Pointer<char16_t>,
              GDExtensionInt)>>('gde_string_to_utf16_chars');
  late final _gde_string_to_utf16_chars =
      _gde_string_to_utf16_charsPtr.asFunction<
          int Function(
              GDExtensionConstStringPtr, ffi.Pointer<char16_t>, int)>();

  GDExtensionObjectPtr gde_global_get_singleton(
    GDExtensionConstStringNamePtr p_name,
  ) {
    return _gde_global_get_singleton(
      p_name,
    );
  }

  late final _gde_global_get_singletonPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionObjectPtr Function(
              GDExtensionConstStringNamePtr)>>('gde_global_get_singleton');
  late final _gde_global_get_singleton =
      _gde_global_get_singletonPtr.asFunction<
          GDExtensionObjectPtr Function(GDExtensionConstStringNamePtr)>();

  ffi.Pointer<ffi.Void> gde_classdb_get_class_tag(
    GDExtensionConstStringNamePtr p_classname,
  ) {
    return _gde_classdb_get_class_tag(
      p_classname,
    );
  }

  late final _gde_classdb_get_class_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              GDExtensionConstStringNamePtr)>>('gde_classdb_get_class_tag');
  late final _gde_classdb_get_class_tag =
      _gde_classdb_get_class_tagPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(GDExtensionConstStringNamePtr)>();

  void gde_classdb_register_extension_class2(
    GDExtensionClassLibraryPtr p_library,
    GDExtensionConstStringNamePtr p_class_name,
    GDExtensionConstStringNamePtr p_parent_class_name,
    ffi.Pointer<GDExtensionClassCreationInfo2> p_extension_funcs,
  ) {
    return _gde_classdb_register_extension_class2(
      p_library,
      p_class_name,
      p_parent_class_name,
      p_extension_funcs,
    );
  }

  late final _gde_classdb_register_extension_class2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionClassCreationInfo2>)>>(
      'gde_classdb_register_extension_class2');
  late final _gde_classdb_register_extension_class2 =
      _gde_classdb_register_extension_class2Ptr.asFunction<
          void Function(
              GDExtensionClassLibraryPtr,
              GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionClassCreationInfo2>)>();

  void gde_classdb_register_extension_class_method(
    GDExtensionClassLibraryPtr p_library,
    GDExtensionConstStringNamePtr p_class_name,
    ffi.Pointer<GDExtensionClassMethodInfo> p_method_info,
  ) {
    return _gde_classdb_register_extension_class_method(
      p_library,
      p_class_name,
      p_method_info,
    );
  }

  late final _gde_classdb_register_extension_class_methodPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionClassMethodInfo>)>>(
      'gde_classdb_register_extension_class_method');
  late final _gde_classdb_register_extension_class_method =
      _gde_classdb_register_extension_class_methodPtr.asFunction<
          void Function(
              GDExtensionClassLibraryPtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionClassMethodInfo>)>();

  void gde_classdb_register_extension_class_property(
    GDExtensionClassLibraryPtr p_library,
    GDExtensionConstStringNamePtr p_class_name,
    ffi.Pointer<GDExtensionPropertyInfo> p_info,
    GDExtensionConstStringNamePtr p_setter,
    GDExtensionConstStringNamePtr p_getter,
  ) {
    return _gde_classdb_register_extension_class_property(
      p_library,
      p_class_name,
      p_info,
      p_setter,
      p_getter,
    );
  }

  late final _gde_classdb_register_extension_class_propertyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionClassLibraryPtr,
                  GDExtensionConstStringNamePtr,
                  ffi.Pointer<GDExtensionPropertyInfo>,
                  GDExtensionConstStringNamePtr,
                  GDExtensionConstStringNamePtr)>>(
      'gde_classdb_register_extension_class_property');
  late final _gde_classdb_register_extension_class_property =
      _gde_classdb_register_extension_class_propertyPtr.asFunction<
          void Function(
              GDExtensionClassLibraryPtr,
              GDExtensionConstStringNamePtr,
              ffi.Pointer<GDExtensionPropertyInfo>,
              GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr)>();

  GDExtensionMethodBindPtr gde_classdb_get_method_bind(
    GDExtensionConstStringNamePtr p_classname,
    GDExtensionConstStringNamePtr p_methodname,
    int p_hash,
  ) {
    return _gde_classdb_get_method_bind(
      p_classname,
      p_methodname,
      p_hash,
    );
  }

  late final _gde_classdb_get_method_bindPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionMethodBindPtr Function(
              GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr,
              GDExtensionInt)>>('gde_classdb_get_method_bind');
  late final _gde_classdb_get_method_bind =
      _gde_classdb_get_method_bindPtr.asFunction<
          GDExtensionMethodBindPtr Function(GDExtensionConstStringNamePtr,
              GDExtensionConstStringNamePtr, int)>();

  GDExtensionObjectPtr gde_classdb_construct_object(
    GDExtensionConstStringNamePtr p_classname,
  ) {
    return _gde_classdb_construct_object(
      p_classname,
    );
  }

  late final _gde_classdb_construct_objectPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionObjectPtr Function(
              GDExtensionConstStringNamePtr)>>('gde_classdb_construct_object');
  late final _gde_classdb_construct_object =
      _gde_classdb_construct_objectPtr.asFunction<
          GDExtensionObjectPtr Function(GDExtensionConstStringNamePtr)>();

  void gde_object_method_bind_call(
    GDExtensionMethodBindPtr p_method_bind,
    GDExtensionObjectPtr p_instance,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    int p_arg_count,
    GDExtensionUninitializedVariantPtr r_ret,
    ffi.Pointer<GDExtensionCallError> r_error,
  ) {
    return _gde_object_method_bind_call(
      p_method_bind,
      p_instance,
      p_args,
      p_arg_count,
      r_ret,
      r_error,
    );
  }

  late final _gde_object_method_bind_callPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionMethodBindPtr,
                  GDExtensionObjectPtr,
                  ffi.Pointer<GDExtensionConstVariantPtr>,
                  GDExtensionInt,
                  GDExtensionUninitializedVariantPtr,
                  ffi.Pointer<GDExtensionCallError>)>>(
      'gde_object_method_bind_call');
  late final _gde_object_method_bind_call =
      _gde_object_method_bind_callPtr.asFunction<
          void Function(
              GDExtensionMethodBindPtr,
              GDExtensionObjectPtr,
              ffi.Pointer<GDExtensionConstVariantPtr>,
              int,
              GDExtensionUninitializedVariantPtr,
              ffi.Pointer<GDExtensionCallError>)>();

  void gde_object_method_bind_ptrcall(
    GDExtensionMethodBindPtr p_method_bind,
    GDExtensionObjectPtr p_instance,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret,
  ) {
    return _gde_object_method_bind_ptrcall(
      p_method_bind,
      p_instance,
      p_args,
      r_ret,
    );
  }

  late final _gde_object_method_bind_ptrcallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionMethodBindPtr,
              GDExtensionObjectPtr,
              ffi.Pointer<GDExtensionConstTypePtr>,
              GDExtensionTypePtr)>>('gde_object_method_bind_ptrcall');
  late final _gde_object_method_bind_ptrcall =
      _gde_object_method_bind_ptrcallPtr.asFunction<
          void Function(GDExtensionMethodBindPtr, GDExtensionObjectPtr,
              ffi.Pointer<GDExtensionConstTypePtr>, GDExtensionTypePtr)>();

  ffi.Pointer<ffi.Void> gde_object_get_instance_binding(
    GDExtensionObjectPtr p_o,
    ffi.Pointer<ffi.Void> p_token,
    ffi.Pointer<GDExtensionInstanceBindingCallbacks> p_callbacks,
  ) {
    return _gde_object_get_instance_binding(
      p_o,
      p_token,
      p_callbacks,
    );
  }

  late final _gde_object_get_instance_bindingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  GDExtensionObjectPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>>(
      'gde_object_get_instance_binding');
  late final _gde_object_get_instance_binding =
      _gde_object_get_instance_bindingPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              GDExtensionObjectPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>();

  void gde_object_set_instance_binding(
    GDExtensionObjectPtr p_o,
    ffi.Pointer<ffi.Void> p_token,
    ffi.Pointer<ffi.Void> p_binding,
    ffi.Pointer<GDExtensionInstanceBindingCallbacks> p_callbacks,
  ) {
    return _gde_object_set_instance_binding(
      p_o,
      p_token,
      p_binding,
      p_callbacks,
    );
  }

  late final _gde_object_set_instance_bindingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GDExtensionObjectPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>>(
      'gde_object_set_instance_binding');
  late final _gde_object_set_instance_binding =
      _gde_object_set_instance_bindingPtr.asFunction<
          void Function(
              GDExtensionObjectPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<GDExtensionInstanceBindingCallbacks>)>();

  void gde_object_set_instance(
    GDExtensionObjectPtr p_o,
    GDExtensionConstStringNamePtr p_classname,
    GDExtensionClassInstancePtr p_instance,
  ) {
    return _gde_object_set_instance(
      p_o,
      p_classname,
      p_instance,
    );
  }

  late final _gde_object_set_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GDExtensionObjectPtr, GDExtensionConstStringNamePtr,
              GDExtensionClassInstancePtr)>>('gde_object_set_instance');
  late final _gde_object_set_instance = _gde_object_set_instancePtr.asFunction<
      void Function(GDExtensionObjectPtr, GDExtensionConstStringNamePtr,
          GDExtensionClassInstancePtr)>();

  GDExtensionObjectPtr gde_object_cast_to(
    GDExtensionConstObjectPtr p_object,
    ffi.Pointer<ffi.Void> p_class_tag,
  ) {
    return _gde_object_cast_to(
      p_object,
      p_class_tag,
    );
  }

  late final _gde_object_cast_toPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionObjectPtr Function(GDExtensionConstObjectPtr,
              ffi.Pointer<ffi.Void>)>>('gde_object_cast_to');
  late final _gde_object_cast_to = _gde_object_cast_toPtr.asFunction<
      GDExtensionObjectPtr Function(
          GDExtensionConstObjectPtr, ffi.Pointer<ffi.Void>)>();

  void gde_object_destroy(
    GDExtensionObjectPtr p_o,
  ) {
    return _gde_object_destroy(
      p_o,
    );
  }

  late final _gde_object_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GDExtensionObjectPtr)>>(
          'gde_object_destroy');
  late final _gde_object_destroy =
      _gde_object_destroyPtr.asFunction<void Function(GDExtensionObjectPtr)>();

  GDExtensionObjectPtr gde_ref_get_object(
    GDExtensionConstRefPtr p_ref,
  ) {
    return _gde_ref_get_object(
      p_ref,
    );
  }

  late final _gde_ref_get_objectPtr = _lookup<
      ffi.NativeFunction<
          GDExtensionObjectPtr Function(
              GDExtensionConstRefPtr)>>('gde_ref_get_object');
  late final _gde_ref_get_object = _gde_ref_get_objectPtr
      .asFunction<GDExtensionObjectPtr Function(GDExtensionConstRefPtr)>();

  void gde_ref_set_object(
    GDExtensionRefPtr p_ref,
    GDExtensionObjectPtr p_object,
  ) {
    return _gde_ref_set_object(
      p_ref,
      p_object,
    );
  }

  late final _gde_ref_set_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GDExtensionRefPtr, GDExtensionObjectPtr)>>('gde_ref_set_object');
  late final _gde_ref_set_object = _gde_ref_set_objectPtr
      .asFunction<void Function(GDExtensionRefPtr, GDExtensionObjectPtr)>();

  GDExtensionScriptInstancePtr gde_script_instance_create2(
    ffi.Pointer<GDExtensionScriptInstanceInfo2> p_info,
    GDExtensionScriptInstanceDataPtr p_instance_data,
  ) {
    return _gde_script_instance_create2(
      p_info,
      p_instance_data,
    );
  }

  late final _gde_script_instance_create2Ptr = _lookup<
          ffi.NativeFunction<
              GDExtensionScriptInstancePtr Function(
                  ffi.Pointer<GDExtensionScriptInstanceInfo2>,
                  GDExtensionScriptInstanceDataPtr)>>(
      'gde_script_instance_create2');
  late final _gde_script_instance_create2 =
      _gde_script_instance_create2Ptr.asFunction<
          GDExtensionScriptInstancePtr Function(
              ffi.Pointer<GDExtensionScriptInstanceInfo2>,
              GDExtensionScriptInstanceDataPtr)>();

  GDExtensionScriptInstanceDataPtr gde_object_get_script_instance(
    GDExtensionConstObjectPtr p_object,
    GDExtensionObjectPtr p_language,
  ) {
    return _gde_object_get_script_instance(
      p_object,
      p_language,
    );
  }

  late final _gde_object_get_script_instancePtr = _lookup<
      ffi.NativeFunction<
          GDExtensionScriptInstanceDataPtr Function(GDExtensionConstObjectPtr,
              GDExtensionObjectPtr)>>('gde_object_get_script_instance');
  late final _gde_object_get_script_instance =
      _gde_object_get_script_instancePtr.asFunction<
          GDExtensionScriptInstanceDataPtr Function(
              GDExtensionConstObjectPtr, GDExtensionObjectPtr)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

abstract class GDExtensionVariantType {
  static const int GDEXTENSION_VARIANT_TYPE_NIL = 0;
  static const int GDEXTENSION_VARIANT_TYPE_BOOL = 1;
  static const int GDEXTENSION_VARIANT_TYPE_INT = 2;
  static const int GDEXTENSION_VARIANT_TYPE_FLOAT = 3;
  static const int GDEXTENSION_VARIANT_TYPE_STRING = 4;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR2 = 5;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR2I = 6;
  static const int GDEXTENSION_VARIANT_TYPE_RECT2 = 7;
  static const int GDEXTENSION_VARIANT_TYPE_RECT2I = 8;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR3 = 9;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR3I = 10;
  static const int GDEXTENSION_VARIANT_TYPE_TRANSFORM2D = 11;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR4 = 12;
  static const int GDEXTENSION_VARIANT_TYPE_VECTOR4I = 13;
  static const int GDEXTENSION_VARIANT_TYPE_PLANE = 14;
  static const int GDEXTENSION_VARIANT_TYPE_QUATERNION = 15;
  static const int GDEXTENSION_VARIANT_TYPE_AABB = 16;
  static const int GDEXTENSION_VARIANT_TYPE_BASIS = 17;
  static const int GDEXTENSION_VARIANT_TYPE_TRANSFORM3D = 18;
  static const int GDEXTENSION_VARIANT_TYPE_PROJECTION = 19;
  static const int GDEXTENSION_VARIANT_TYPE_COLOR = 20;
  static const int GDEXTENSION_VARIANT_TYPE_STRING_NAME = 21;
  static const int GDEXTENSION_VARIANT_TYPE_NODE_PATH = 22;
  static const int GDEXTENSION_VARIANT_TYPE_RID = 23;
  static const int GDEXTENSION_VARIANT_TYPE_OBJECT = 24;
  static const int GDEXTENSION_VARIANT_TYPE_CALLABLE = 25;
  static const int GDEXTENSION_VARIANT_TYPE_SIGNAL = 26;
  static const int GDEXTENSION_VARIANT_TYPE_DICTIONARY = 27;
  static const int GDEXTENSION_VARIANT_TYPE_ARRAY = 28;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY = 29;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY = 30;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY = 31;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY = 32;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY = 33;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY = 34;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY = 35;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY = 36;
  static const int GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY = 37;
  static const int GDEXTENSION_VARIANT_TYPE_VARIANT_MAX = 38;
}

abstract class GDExtensionVariantOperator {
  static const int GDEXTENSION_VARIANT_OP_EQUAL = 0;
  static const int GDEXTENSION_VARIANT_OP_NOT_EQUAL = 1;
  static const int GDEXTENSION_VARIANT_OP_LESS = 2;
  static const int GDEXTENSION_VARIANT_OP_LESS_EQUAL = 3;
  static const int GDEXTENSION_VARIANT_OP_GREATER = 4;
  static const int GDEXTENSION_VARIANT_OP_GREATER_EQUAL = 5;
  static const int GDEXTENSION_VARIANT_OP_ADD = 6;
  static const int GDEXTENSION_VARIANT_OP_SUBTRACT = 7;
  static const int GDEXTENSION_VARIANT_OP_MULTIPLY = 8;
  static const int GDEXTENSION_VARIANT_OP_DIVIDE = 9;
  static const int GDEXTENSION_VARIANT_OP_NEGATE = 10;
  static const int GDEXTENSION_VARIANT_OP_POSITIVE = 11;
  static const int GDEXTENSION_VARIANT_OP_MODULE = 12;
  static const int GDEXTENSION_VARIANT_OP_POWER = 13;
  static const int GDEXTENSION_VARIANT_OP_SHIFT_LEFT = 14;
  static const int GDEXTENSION_VARIANT_OP_SHIFT_RIGHT = 15;
  static const int GDEXTENSION_VARIANT_OP_BIT_AND = 16;
  static const int GDEXTENSION_VARIANT_OP_BIT_OR = 17;
  static const int GDEXTENSION_VARIANT_OP_BIT_XOR = 18;
  static const int GDEXTENSION_VARIANT_OP_BIT_NEGATE = 19;
  static const int GDEXTENSION_VARIANT_OP_AND = 20;
  static const int GDEXTENSION_VARIANT_OP_OR = 21;
  static const int GDEXTENSION_VARIANT_OP_XOR = 22;
  static const int GDEXTENSION_VARIANT_OP_NOT = 23;
  static const int GDEXTENSION_VARIANT_OP_IN = 24;
  static const int GDEXTENSION_VARIANT_OP_MAX = 25;
}

abstract class GDExtensionCallErrorType {
  static const int GDEXTENSION_CALL_OK = 0;
  static const int GDEXTENSION_CALL_ERROR_INVALID_METHOD = 1;
  static const int GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT = 2;
  static const int GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS = 3;
  static const int GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS = 4;
  static const int GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL = 5;
  static const int GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST = 6;
}

final class GDExtensionCallError extends ffi.Struct {
  @ffi.Int32()
  external int error;

  @ffi.Int32()
  external int argument;

  @ffi.Int32()
  external int expected;
}

final class GDExtensionInstanceBindingCallbacks extends ffi.Struct {
  external GDExtensionInstanceBindingCreateCallback create_callback;

  external GDExtensionInstanceBindingFreeCallback free_callback;

  external GDExtensionInstanceBindingReferenceCallback reference_callback;
}

typedef GDExtensionInstanceBindingCreateCallback = ffi.Pointer<
    ffi.NativeFunction<GDExtensionInstanceBindingCreateCallbackFunction>>;
typedef GDExtensionInstanceBindingCreateCallbackFunction = ffi.Pointer<ffi.Void>
    Function(ffi.Pointer<ffi.Void> p_token, ffi.Pointer<ffi.Void> p_instance);
typedef GDExtensionInstanceBindingFreeCallback = ffi.Pointer<
    ffi.NativeFunction<GDExtensionInstanceBindingFreeCallbackFunction>>;
typedef GDExtensionInstanceBindingFreeCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> p_token,
    ffi.Pointer<ffi.Void> p_instance,
    ffi.Pointer<ffi.Void> p_binding);
typedef DartGDExtensionInstanceBindingFreeCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> p_token,
    ffi.Pointer<ffi.Void> p_instance,
    ffi.Pointer<ffi.Void> p_binding);
typedef GDExtensionInstanceBindingReferenceCallback = ffi.Pointer<
    ffi.NativeFunction<GDExtensionInstanceBindingReferenceCallbackFunction>>;
typedef GDExtensionInstanceBindingReferenceCallbackFunction
    = GDExtensionBool Function(ffi.Pointer<ffi.Void> p_token,
        ffi.Pointer<ffi.Void> p_binding, GDExtensionBool p_reference);
typedef DartGDExtensionInstanceBindingReferenceCallbackFunction
    = DartGDExtensionBool Function(ffi.Pointer<ffi.Void> p_token,
        ffi.Pointer<ffi.Void> p_binding, DartGDExtensionBool p_reference);
typedef GDExtensionBool = ffi.Uint8;
typedef DartGDExtensionBool = int;

final class GDExtensionPropertyInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external GDExtensionStringNamePtr name;

  external GDExtensionStringNamePtr class_name;

  @ffi.Uint32()
  external int hint;

  external GDExtensionStringPtr hint_string;

  @ffi.Uint32()
  external int usage;
}

typedef GDExtensionStringNamePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionStringPtr = ffi.Pointer<ffi.Void>;

final class GDExtensionMethodInfo extends ffi.Struct {
  external GDExtensionStringNamePtr name;

  external GDExtensionPropertyInfo return_value;

  @ffi.Uint32()
  external int flags;

  @ffi.Int32()
  external int id;

  @ffi.Uint32()
  external int argument_count;

  external ffi.Pointer<GDExtensionPropertyInfo> arguments;

  @ffi.Uint32()
  external int default_argument_count;

  external ffi.Pointer<GDExtensionVariantPtr> default_arguments;
}

typedef GDExtensionVariantPtr = ffi.Pointer<ffi.Void>;

final class GDExtensionClassCreationInfo extends ffi.Struct {
  @GDExtensionBool()
  external int is_virtual;

  @GDExtensionBool()
  external int is_abstract;

  external GDExtensionClassSet set_func;

  external GDExtensionClassGet get_func;

  external GDExtensionClassGetPropertyList get_property_list_func;

  external GDExtensionClassFreePropertyList free_property_list_func;

  external GDExtensionClassPropertyCanRevert property_can_revert_func;

  external GDExtensionClassPropertyGetRevert property_get_revert_func;

  external GDExtensionClassNotification notification_func;

  external GDExtensionClassToString to_string_func;

  external GDExtensionClassReference reference_func;

  external GDExtensionClassUnreference unreference_func;

  external GDExtensionClassCreateInstance create_instance_func;

  external GDExtensionClassFreeInstance free_instance_func;

  external GDExtensionClassGetVirtual get_virtual_func;

  external GDExtensionClassGetRID get_rid_func;

  external ffi.Pointer<ffi.Void> class_userdata;
}

typedef GDExtensionClassSet
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassSetFunction>>;
typedef GDExtensionClassSetFunction = GDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value);
typedef DartGDExtensionClassSetFunction = DartGDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value);
typedef GDExtensionClassInstancePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstStringNamePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstVariantPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassGet
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassGetFunction>>;
typedef GDExtensionClassGetFunction = GDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionVariantPtr r_ret);
typedef DartGDExtensionClassGetFunction = DartGDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionVariantPtr r_ret);
typedef GDExtensionClassGetPropertyList
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassGetPropertyListFunction>>;
typedef GDExtensionClassGetPropertyListFunction
    = ffi.Pointer<GDExtensionPropertyInfo> Function(
        GDExtensionClassInstancePtr p_instance,
        ffi.Pointer<ffi.Uint32> r_count);
typedef GDExtensionClassFreePropertyList
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassFreePropertyListFunction>>;
typedef GDExtensionClassFreePropertyListFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionPropertyInfo> p_list);
typedef DartGDExtensionClassFreePropertyListFunction = void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionPropertyInfo> p_list);
typedef GDExtensionClassPropertyCanRevert = ffi
    .Pointer<ffi.NativeFunction<GDExtensionClassPropertyCanRevertFunction>>;
typedef GDExtensionClassPropertyCanRevertFunction = GDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name);
typedef DartGDExtensionClassPropertyCanRevertFunction
    = DartGDExtensionBool Function(GDExtensionClassInstancePtr p_instance,
        GDExtensionConstStringNamePtr p_name);
typedef GDExtensionClassPropertyGetRevert = ffi
    .Pointer<ffi.NativeFunction<GDExtensionClassPropertyGetRevertFunction>>;
typedef GDExtensionClassPropertyGetRevertFunction = GDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionVariantPtr r_ret);
typedef DartGDExtensionClassPropertyGetRevertFunction
    = DartGDExtensionBool Function(GDExtensionClassInstancePtr p_instance,
        GDExtensionConstStringNamePtr p_name, GDExtensionVariantPtr r_ret);
typedef GDExtensionClassNotification
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassNotificationFunction>>;
typedef GDExtensionClassNotificationFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance, ffi.Int32 p_what);
typedef DartGDExtensionClassNotificationFunction = void Function(
    GDExtensionClassInstancePtr p_instance, int p_what);
typedef GDExtensionClassToString
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassToStringFunction>>;
typedef GDExtensionClassToStringFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr p_out);
typedef DartGDExtensionClassToStringFunction = void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr p_out);
typedef GDExtensionClassReference
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassReferenceFunction>>;
typedef GDExtensionClassReferenceFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance);
typedef DartGDExtensionClassReferenceFunction = void Function(
    GDExtensionClassInstancePtr p_instance);
typedef GDExtensionClassUnreference
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassUnreferenceFunction>>;
typedef GDExtensionClassUnreferenceFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance);
typedef DartGDExtensionClassUnreferenceFunction = void Function(
    GDExtensionClassInstancePtr p_instance);
typedef GDExtensionClassCreateInstance
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassCreateInstanceFunction>>;
typedef GDExtensionClassCreateInstanceFunction = GDExtensionObjectPtr Function(
    ffi.Pointer<ffi.Void> p_class_userdata);
typedef GDExtensionObjectPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassFreeInstance
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassFreeInstanceFunction>>;
typedef GDExtensionClassFreeInstanceFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> p_class_userdata,
    GDExtensionClassInstancePtr p_instance);
typedef DartGDExtensionClassFreeInstanceFunction = void Function(
    ffi.Pointer<ffi.Void> p_class_userdata,
    GDExtensionClassInstancePtr p_instance);
typedef GDExtensionClassGetVirtual
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassGetVirtualFunction>>;
typedef GDExtensionClassGetVirtualFunction
    = GDExtensionClassCallVirtual Function(
        ffi.Pointer<ffi.Void> p_class_userdata,
        GDExtensionConstStringNamePtr p_name);
typedef GDExtensionClassCallVirtual
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassCallVirtualFunction>>;
typedef GDExtensionClassCallVirtualFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);
typedef DartGDExtensionClassCallVirtualFunction = void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);
typedef GDExtensionConstTypePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionTypePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionClassGetRID
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassGetRIDFunction>>;
typedef GDExtensionClassGetRIDFunction = ffi.Uint64 Function(
    GDExtensionClassInstancePtr p_instance);
typedef DartGDExtensionClassGetRIDFunction = int Function(
    GDExtensionClassInstancePtr p_instance);

final class GDExtensionClassCreationInfo2 extends ffi.Struct {
  @GDExtensionBool()
  external int is_virtual;

  @GDExtensionBool()
  external int is_abstract;

  @GDExtensionBool()
  external int is_exposed;

  external GDExtensionClassSet set_func;

  external GDExtensionClassGet get_func;

  external GDExtensionClassGetPropertyList get_property_list_func;

  external GDExtensionClassFreePropertyList free_property_list_func;

  external GDExtensionClassPropertyCanRevert property_can_revert_func;

  external GDExtensionClassPropertyGetRevert property_get_revert_func;

  external GDExtensionClassValidateProperty validate_property_func;

  external GDExtensionClassNotification2 notification_func;

  external GDExtensionClassToString to_string_func;

  external GDExtensionClassReference reference_func;

  external GDExtensionClassUnreference unreference_func;

  external GDExtensionClassCreateInstance create_instance_func;

  external GDExtensionClassFreeInstance free_instance_func;

  external GDExtensionClassRecreateInstance recreate_instance_func;

  external GDExtensionClassGetVirtual get_virtual_func;

  external GDExtensionClassGetVirtualCallData get_virtual_call_data_func;

  external GDExtensionClassCallVirtualWithData call_virtual_with_data_func;

  external GDExtensionClassGetRID get_rid_func;

  external ffi.Pointer<ffi.Void> class_userdata;
}

typedef GDExtensionClassValidateProperty
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassValidatePropertyFunction>>;
typedef GDExtensionClassValidatePropertyFunction = GDExtensionBool Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionPropertyInfo> p_property);
typedef DartGDExtensionClassValidatePropertyFunction
    = DartGDExtensionBool Function(GDExtensionClassInstancePtr p_instance,
        ffi.Pointer<GDExtensionPropertyInfo> p_property);
typedef GDExtensionClassNotification2
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassNotification2Function>>;
typedef GDExtensionClassNotification2Function = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance,
    ffi.Int32 p_what,
    GDExtensionBool p_reversed);
typedef DartGDExtensionClassNotification2Function = void Function(
    GDExtensionClassInstancePtr p_instance,
    int p_what,
    DartGDExtensionBool p_reversed);
typedef GDExtensionClassRecreateInstance
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassRecreateInstanceFunction>>;
typedef GDExtensionClassRecreateInstanceFunction
    = GDExtensionClassInstancePtr Function(
        ffi.Pointer<ffi.Void> p_class_userdata, GDExtensionObjectPtr p_object);
typedef GDExtensionClassGetVirtualCallData = ffi
    .Pointer<ffi.NativeFunction<GDExtensionClassGetVirtualCallDataFunction>>;
typedef GDExtensionClassGetVirtualCallDataFunction
    = ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> p_class_userdata,
        GDExtensionConstStringNamePtr p_name);
typedef GDExtensionClassCallVirtualWithData = ffi
    .Pointer<ffi.NativeFunction<GDExtensionClassCallVirtualWithDataFunction>>;
typedef GDExtensionClassCallVirtualWithDataFunction = ffi.Void Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    ffi.Pointer<ffi.Void> p_virtual_call_userdata,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);
typedef DartGDExtensionClassCallVirtualWithDataFunction = void Function(
    GDExtensionClassInstancePtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    ffi.Pointer<ffi.Void> p_virtual_call_userdata,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);

abstract class GDExtensionClassMethodFlags {
  static const int GDEXTENSION_METHOD_FLAG_NORMAL = 1;
  static const int GDEXTENSION_METHOD_FLAG_EDITOR = 2;
  static const int GDEXTENSION_METHOD_FLAG_CONST = 4;
  static const int GDEXTENSION_METHOD_FLAG_VIRTUAL = 8;
  static const int GDEXTENSION_METHOD_FLAG_VARARG = 16;
  static const int GDEXTENSION_METHOD_FLAG_STATIC = 32;
  static const int GDEXTENSION_METHOD_FLAGS_DEFAULT = 1;
}

abstract class GDExtensionClassMethodArgumentMetadata {
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE = 0;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8 = 1;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16 = 2;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32 = 3;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64 = 4;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8 = 5;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16 = 6;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32 = 7;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64 = 8;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT = 9;
  static const int GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE = 10;
}

final class GDExtensionClassMethodInfo extends ffi.Struct {
  external GDExtensionStringNamePtr name;

  external ffi.Pointer<ffi.Void> method_userdata;

  external GDExtensionClassMethodCall call_func;

  external GDExtensionClassMethodPtrCall ptrcall_func;

  @ffi.Uint32()
  external int method_flags;

  @GDExtensionBool()
  external int has_return_value;

  external ffi.Pointer<GDExtensionPropertyInfo> return_value_info;

  @ffi.Int32()
  external int return_value_metadata;

  @ffi.Uint32()
  external int argument_count;

  external ffi.Pointer<GDExtensionPropertyInfo> arguments_info;

  external ffi.Pointer<ffi.Int32> arguments_metadata;

  @ffi.Uint32()
  external int default_argument_count;

  external ffi.Pointer<GDExtensionVariantPtr> default_arguments;
}

typedef GDExtensionClassMethodCall
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassMethodCallFunction>>;
typedef GDExtensionClassMethodCallFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> method_userdata,
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    GDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef DartGDExtensionClassMethodCallFunction = void Function(
    ffi.Pointer<ffi.Void> method_userdata,
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    DartGDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef GDExtensionInt = ffi.Int64;
typedef DartGDExtensionInt = int;
typedef GDExtensionClassMethodPtrCall
    = ffi.Pointer<ffi.NativeFunction<GDExtensionClassMethodPtrCallFunction>>;
typedef GDExtensionClassMethodPtrCallFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> method_userdata,
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);
typedef DartGDExtensionClassMethodPtrCallFunction = void Function(
    ffi.Pointer<ffi.Void> method_userdata,
    GDExtensionClassInstancePtr p_instance,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_ret);

final class GDExtensionCallableCustomInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> callable_userdata;

  external ffi.Pointer<ffi.Void> token;

  @GDObjectInstanceID()
  external int object_id;

  external GDExtensionCallableCustomCall call_func;

  external GDExtensionCallableCustomIsValid is_valid_func;

  external GDExtensionCallableCustomFree free_func;

  external GDExtensionCallableCustomHash hash_func;

  external GDExtensionCallableCustomEqual equal_func;

  external GDExtensionCallableCustomLessThan less_than_func;

  external GDExtensionCallableCustomToString to_string_func;
}

typedef GDObjectInstanceID = ffi.Uint64;
typedef DartGDObjectInstanceID = int;
typedef GDExtensionCallableCustomCall
    = ffi.Pointer<ffi.NativeFunction<GDExtensionCallableCustomCallFunction>>;
typedef GDExtensionCallableCustomCallFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callable_userdata,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    GDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef DartGDExtensionCallableCustomCallFunction = void Function(
    ffi.Pointer<ffi.Void> callable_userdata,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    DartGDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef GDExtensionCallableCustomIsValid
    = ffi.Pointer<ffi.NativeFunction<GDExtensionCallableCustomIsValidFunction>>;
typedef GDExtensionCallableCustomIsValidFunction = GDExtensionBool Function(
    ffi.Pointer<ffi.Void> callable_userdata);
typedef DartGDExtensionCallableCustomIsValidFunction = DartGDExtensionBool
    Function(ffi.Pointer<ffi.Void> callable_userdata);
typedef GDExtensionCallableCustomFree
    = ffi.Pointer<ffi.NativeFunction<GDExtensionCallableCustomFreeFunction>>;
typedef GDExtensionCallableCustomFreeFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callable_userdata);
typedef DartGDExtensionCallableCustomFreeFunction = void Function(
    ffi.Pointer<ffi.Void> callable_userdata);
typedef GDExtensionCallableCustomHash
    = ffi.Pointer<ffi.NativeFunction<GDExtensionCallableCustomHashFunction>>;
typedef GDExtensionCallableCustomHashFunction = ffi.Uint32 Function(
    ffi.Pointer<ffi.Void> callable_userdata);
typedef DartGDExtensionCallableCustomHashFunction = int Function(
    ffi.Pointer<ffi.Void> callable_userdata);
typedef GDExtensionCallableCustomEqual
    = ffi.Pointer<ffi.NativeFunction<GDExtensionCallableCustomEqualFunction>>;
typedef GDExtensionCallableCustomEqualFunction = GDExtensionBool Function(
    ffi.Pointer<ffi.Void> callable_userdata_a,
    ffi.Pointer<ffi.Void> callable_userdata_b);
typedef DartGDExtensionCallableCustomEqualFunction
    = DartGDExtensionBool Function(ffi.Pointer<ffi.Void> callable_userdata_a,
        ffi.Pointer<ffi.Void> callable_userdata_b);
typedef GDExtensionCallableCustomLessThan = ffi
    .Pointer<ffi.NativeFunction<GDExtensionCallableCustomLessThanFunction>>;
typedef GDExtensionCallableCustomLessThanFunction = GDExtensionBool Function(
    ffi.Pointer<ffi.Void> callable_userdata_a,
    ffi.Pointer<ffi.Void> callable_userdata_b);
typedef DartGDExtensionCallableCustomLessThanFunction
    = DartGDExtensionBool Function(ffi.Pointer<ffi.Void> callable_userdata_a,
        ffi.Pointer<ffi.Void> callable_userdata_b);
typedef GDExtensionCallableCustomToString = ffi
    .Pointer<ffi.NativeFunction<GDExtensionCallableCustomToStringFunction>>;
typedef GDExtensionCallableCustomToStringFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> callable_userdata,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr r_out);
typedef DartGDExtensionCallableCustomToStringFunction = void Function(
    ffi.Pointer<ffi.Void> callable_userdata,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr r_out);

final class GDExtensionScriptInstanceInfo extends ffi.Struct {
  external GDExtensionScriptInstanceSet set_func;

  external GDExtensionScriptInstanceGet get_func;

  external GDExtensionScriptInstanceGetPropertyList get_property_list_func;

  external GDExtensionScriptInstanceFreePropertyList free_property_list_func;

  external GDExtensionScriptInstancePropertyCanRevert property_can_revert_func;

  external GDExtensionScriptInstancePropertyGetRevert property_get_revert_func;

  external GDExtensionScriptInstanceGetOwner get_owner_func;

  external GDExtensionScriptInstanceGetPropertyState get_property_state_func;

  external GDExtensionScriptInstanceGetMethodList get_method_list_func;

  external GDExtensionScriptInstanceFreeMethodList free_method_list_func;

  external GDExtensionScriptInstanceGetPropertyType get_property_type_func;

  external GDExtensionScriptInstanceHasMethod has_method_func;

  external GDExtensionScriptInstanceCall call_func;

  external GDExtensionScriptInstanceNotification notification_func;

  external GDExtensionScriptInstanceToString to_string_func;

  external GDExtensionScriptInstanceRefCountIncremented
      refcount_incremented_func;

  external GDExtensionScriptInstanceRefCountDecremented
      refcount_decremented_func;

  external GDExtensionScriptInstanceGetScript get_script_func;

  external GDExtensionScriptInstanceIsPlaceholder is_placeholder_func;

  external GDExtensionScriptInstanceSet set_fallback_func;

  external GDExtensionScriptInstanceGet get_fallback_func;

  external GDExtensionScriptInstanceGetLanguage get_language_func;

  external GDExtensionScriptInstanceFree free_func;
}

typedef GDExtensionScriptInstanceSet
    = ffi.Pointer<ffi.NativeFunction<GDExtensionScriptInstanceSetFunction>>;
typedef GDExtensionScriptInstanceSetFunction = GDExtensionBool Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value);
typedef DartGDExtensionScriptInstanceSetFunction = DartGDExtensionBool Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value);
typedef GDExtensionScriptInstanceDataPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstanceGet
    = ffi.Pointer<ffi.NativeFunction<GDExtensionScriptInstanceGetFunction>>;
typedef GDExtensionScriptInstanceGetFunction = GDExtensionBool Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionVariantPtr r_ret);
typedef DartGDExtensionScriptInstanceGetFunction = DartGDExtensionBool Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    GDExtensionVariantPtr r_ret);
typedef GDExtensionScriptInstanceGetPropertyList = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceGetPropertyListFunction>>;
typedef GDExtensionScriptInstanceGetPropertyListFunction
    = ffi.Pointer<GDExtensionPropertyInfo> Function(
        GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<ffi.Uint32> r_count);
typedef GDExtensionScriptInstanceFreePropertyList = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceFreePropertyListFunction>>;
typedef GDExtensionScriptInstanceFreePropertyListFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionPropertyInfo> p_list);
typedef DartGDExtensionScriptInstanceFreePropertyListFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionPropertyInfo> p_list);
typedef GDExtensionScriptInstancePropertyCanRevert = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstancePropertyCanRevertFunction>>;
typedef GDExtensionScriptInstancePropertyCanRevertFunction
    = GDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        GDExtensionConstStringNamePtr p_name);
typedef DartGDExtensionScriptInstancePropertyCanRevertFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        GDExtensionConstStringNamePtr p_name);
typedef GDExtensionScriptInstancePropertyGetRevert = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstancePropertyGetRevertFunction>>;
typedef GDExtensionScriptInstancePropertyGetRevertFunction
    = GDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        GDExtensionConstStringNamePtr p_name, GDExtensionVariantPtr r_ret);
typedef DartGDExtensionScriptInstancePropertyGetRevertFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        GDExtensionConstStringNamePtr p_name, GDExtensionVariantPtr r_ret);
typedef GDExtensionScriptInstanceGetOwner = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceGetOwnerFunction>>;
typedef GDExtensionScriptInstanceGetOwnerFunction = GDExtensionObjectPtr
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptInstanceGetPropertyState = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceGetPropertyStateFunction>>;
typedef GDExtensionScriptInstanceGetPropertyStateFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionScriptInstancePropertyStateAdd p_add_func,
    ffi.Pointer<ffi.Void> p_userdata);
typedef DartGDExtensionScriptInstanceGetPropertyStateFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionScriptInstancePropertyStateAdd p_add_func,
    ffi.Pointer<ffi.Void> p_userdata);
typedef GDExtensionScriptInstancePropertyStateAdd = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstancePropertyStateAddFunction>>;
typedef GDExtensionScriptInstancePropertyStateAddFunction = ffi.Void Function(
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value,
    ffi.Pointer<ffi.Void> p_userdata);
typedef DartGDExtensionScriptInstancePropertyStateAddFunction = void Function(
    GDExtensionConstStringNamePtr p_name,
    GDExtensionConstVariantPtr p_value,
    ffi.Pointer<ffi.Void> p_userdata);
typedef GDExtensionScriptInstanceGetMethodList = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceGetMethodListFunction>>;
typedef GDExtensionScriptInstanceGetMethodListFunction
    = ffi.Pointer<GDExtensionMethodInfo> Function(
        GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<ffi.Uint32> r_count);
typedef GDExtensionScriptInstanceFreeMethodList = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceFreeMethodListFunction>>;
typedef GDExtensionScriptInstanceFreeMethodListFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionMethodInfo> p_list);
typedef DartGDExtensionScriptInstanceFreeMethodListFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionMethodInfo> p_list);
typedef GDExtensionScriptInstanceGetPropertyType = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceGetPropertyTypeFunction>>;
typedef GDExtensionScriptInstanceGetPropertyTypeFunction = ffi.Int32 Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    ffi.Pointer<GDExtensionBool> r_is_valid);
typedef DartGDExtensionScriptInstanceGetPropertyTypeFunction = int Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name,
    ffi.Pointer<GDExtensionBool> r_is_valid);
typedef GDExtensionScriptInstanceHasMethod = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceHasMethodFunction>>;
typedef GDExtensionScriptInstanceHasMethodFunction = GDExtensionBool Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    GDExtensionConstStringNamePtr p_name);
typedef DartGDExtensionScriptInstanceHasMethodFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        GDExtensionConstStringNamePtr p_name);
typedef GDExtensionScriptInstanceCall
    = ffi.Pointer<ffi.NativeFunction<GDExtensionScriptInstanceCallFunction>>;
typedef GDExtensionScriptInstanceCallFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_self,
    GDExtensionConstStringNamePtr p_method,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    GDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef DartGDExtensionScriptInstanceCallFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_self,
    GDExtensionConstStringNamePtr p_method,
    ffi.Pointer<GDExtensionConstVariantPtr> p_args,
    DartGDExtensionInt p_argument_count,
    GDExtensionVariantPtr r_return,
    ffi.Pointer<GDExtensionCallError> r_error);
typedef GDExtensionScriptInstanceNotification = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceNotificationFunction>>;
typedef GDExtensionScriptInstanceNotificationFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance, ffi.Int32 p_what);
typedef DartGDExtensionScriptInstanceNotificationFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance, int p_what);
typedef GDExtensionScriptInstanceToString = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceToStringFunction>>;
typedef GDExtensionScriptInstanceToStringFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr r_out);
typedef DartGDExtensionScriptInstanceToStringFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Pointer<GDExtensionBool> r_is_valid,
    GDExtensionStringPtr r_out);
typedef GDExtensionScriptInstanceRefCountIncremented = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceRefCountIncrementedFunction>>;
typedef GDExtensionScriptInstanceRefCountIncrementedFunction = ffi.Void
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef DartGDExtensionScriptInstanceRefCountIncrementedFunction = void
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptInstanceRefCountDecremented = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceRefCountDecrementedFunction>>;
typedef GDExtensionScriptInstanceRefCountDecrementedFunction = GDExtensionBool
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef DartGDExtensionScriptInstanceRefCountDecrementedFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptInstanceGetScript = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceGetScriptFunction>>;
typedef GDExtensionScriptInstanceGetScriptFunction = GDExtensionObjectPtr
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptInstanceIsPlaceholder = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceIsPlaceholderFunction>>;
typedef GDExtensionScriptInstanceIsPlaceholderFunction = GDExtensionBool
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef DartGDExtensionScriptInstanceIsPlaceholderFunction = DartGDExtensionBool
    Function(GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptInstanceGetLanguage = ffi
    .Pointer<ffi.NativeFunction<GDExtensionScriptInstanceGetLanguageFunction>>;
typedef GDExtensionScriptInstanceGetLanguageFunction
    = GDExtensionScriptLanguagePtr Function(
        GDExtensionScriptInstanceDataPtr p_instance);
typedef GDExtensionScriptLanguagePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstanceFree
    = ffi.Pointer<ffi.NativeFunction<GDExtensionScriptInstanceFreeFunction>>;
typedef GDExtensionScriptInstanceFreeFunction = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance);
typedef DartGDExtensionScriptInstanceFreeFunction = void Function(
    GDExtensionScriptInstanceDataPtr p_instance);

final class GDExtensionScriptInstanceInfo2 extends ffi.Struct {
  external GDExtensionScriptInstanceSet set_func;

  external GDExtensionScriptInstanceGet get_func;

  external GDExtensionScriptInstanceGetPropertyList get_property_list_func;

  external GDExtensionScriptInstanceFreePropertyList free_property_list_func;

  external GDExtensionScriptInstanceGetClassCategory get_class_category_func;

  external GDExtensionScriptInstancePropertyCanRevert property_can_revert_func;

  external GDExtensionScriptInstancePropertyGetRevert property_get_revert_func;

  external GDExtensionScriptInstanceGetOwner get_owner_func;

  external GDExtensionScriptInstanceGetPropertyState get_property_state_func;

  external GDExtensionScriptInstanceGetMethodList get_method_list_func;

  external GDExtensionScriptInstanceFreeMethodList free_method_list_func;

  external GDExtensionScriptInstanceGetPropertyType get_property_type_func;

  external GDExtensionScriptInstanceValidateProperty validate_property_func;

  external GDExtensionScriptInstanceHasMethod has_method_func;

  external GDExtensionScriptInstanceCall call_func;

  external GDExtensionScriptInstanceNotification2 notification_func;

  external GDExtensionScriptInstanceToString to_string_func;

  external GDExtensionScriptInstanceRefCountIncremented
      refcount_incremented_func;

  external GDExtensionScriptInstanceRefCountDecremented
      refcount_decremented_func;

  external GDExtensionScriptInstanceGetScript get_script_func;

  external GDExtensionScriptInstanceIsPlaceholder is_placeholder_func;

  external GDExtensionScriptInstanceSet set_fallback_func;

  external GDExtensionScriptInstanceGet get_fallback_func;

  external GDExtensionScriptInstanceGetLanguage get_language_func;

  external GDExtensionScriptInstanceFree free_func;
}

typedef GDExtensionScriptInstanceGetClassCategory = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceGetClassCategoryFunction>>;
typedef GDExtensionScriptInstanceGetClassCategoryFunction
    = GDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<GDExtensionPropertyInfo> p_class_category);
typedef DartGDExtensionScriptInstanceGetClassCategoryFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<GDExtensionPropertyInfo> p_class_category);
typedef GDExtensionScriptInstanceValidateProperty = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceValidatePropertyFunction>>;
typedef GDExtensionScriptInstanceValidatePropertyFunction
    = GDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<GDExtensionPropertyInfo> p_property);
typedef DartGDExtensionScriptInstanceValidatePropertyFunction
    = DartGDExtensionBool Function(GDExtensionScriptInstanceDataPtr p_instance,
        ffi.Pointer<GDExtensionPropertyInfo> p_property);
typedef GDExtensionScriptInstanceNotification2 = ffi.Pointer<
    ffi.NativeFunction<GDExtensionScriptInstanceNotification2Function>>;
typedef GDExtensionScriptInstanceNotification2Function = ffi.Void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    ffi.Int32 p_what,
    GDExtensionBool p_reversed);
typedef DartGDExtensionScriptInstanceNotification2Function = void Function(
    GDExtensionScriptInstanceDataPtr p_instance,
    int p_what,
    DartGDExtensionBool p_reversed);

abstract class GDExtensionInitializationLevel {
  static const int GDEXTENSION_INITIALIZATION_CORE = 0;
  static const int GDEXTENSION_INITIALIZATION_SERVERS = 1;
  static const int GDEXTENSION_INITIALIZATION_SCENE = 2;
  static const int GDEXTENSION_INITIALIZATION_EDITOR = 3;
  static const int GDEXTENSION_MAX_INITIALIZATION_LEVEL = 4;
}

final class GDExtensionInitialization extends ffi.Struct {
  @ffi.Int32()
  external int minimum_initialization_level;

  external ffi.Pointer<ffi.Void> userdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> userdata, ffi.Int32 p_level)>> initialize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> userdata, ffi.Int32 p_level)>> deinitialize;
}

final class GDExtensionGodotVersion extends ffi.Struct {
  @ffi.Uint32()
  external int major;

  @ffi.Uint32()
  external int minor;

  @ffi.Uint32()
  external int patch;

  external ffi.Pointer<ffi.Char> string;
}

typedef GDExtensionInterfaceGetProcAddress = ffi
    .Pointer<ffi.NativeFunction<GDExtensionInterfaceGetProcAddressFunction>>;
typedef GDExtensionInterfaceGetProcAddressFunction
    = GDExtensionInterfaceFunctionPtr Function(
        ffi.Pointer<ffi.Char> p_function_name);
typedef GDExtensionInterfaceFunctionPtr
    = ffi.Pointer<ffi.NativeFunction<GDExtensionInterfaceFunctionPtrFunction>>;
typedef GDExtensionInterfaceFunctionPtrFunction = ffi.Void Function();
typedef DartGDExtensionInterfaceFunctionPtrFunction = void Function();
typedef GDExtensionClassLibraryPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionUninitializedStringPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionPtrConstructor
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrConstructorFunction>>;
typedef GDExtensionPtrConstructorFunction = ffi.Void Function(
    GDExtensionUninitializedTypePtr p_base,
    ffi.Pointer<GDExtensionConstTypePtr> p_args);
typedef DartGDExtensionPtrConstructorFunction = void Function(
    GDExtensionUninitializedTypePtr p_base,
    ffi.Pointer<GDExtensionConstTypePtr> p_args);
typedef GDExtensionUninitializedTypePtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionPtrDestructor
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrDestructorFunction>>;
typedef GDExtensionPtrDestructorFunction = ffi.Void Function(
    GDExtensionTypePtr p_base);
typedef DartGDExtensionPtrDestructorFunction = void Function(
    GDExtensionTypePtr p_base);
typedef GDExtensionUninitializedVariantPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionPtrBuiltInMethod
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrBuiltInMethodFunction>>;
typedef GDExtensionPtrBuiltInMethodFunction = ffi.Void Function(
    GDExtensionTypePtr p_base,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_return,
    ffi.Int p_argument_count);
typedef DartGDExtensionPtrBuiltInMethodFunction = void Function(
    GDExtensionTypePtr p_base,
    ffi.Pointer<GDExtensionConstTypePtr> p_args,
    GDExtensionTypePtr r_return,
    int p_argument_count);
typedef GDExtensionVariantFromTypeConstructorFunc = ffi.Pointer<
    ffi.NativeFunction<GDExtensionVariantFromTypeConstructorFuncFunction>>;
typedef GDExtensionVariantFromTypeConstructorFuncFunction = ffi.Void Function(
    GDExtensionUninitializedVariantPtr, GDExtensionTypePtr);
typedef DartGDExtensionVariantFromTypeConstructorFuncFunction = void Function(
    GDExtensionUninitializedVariantPtr, GDExtensionTypePtr);
typedef GDExtensionTypeFromVariantConstructorFunc = ffi.Pointer<
    ffi.NativeFunction<GDExtensionTypeFromVariantConstructorFuncFunction>>;
typedef GDExtensionTypeFromVariantConstructorFuncFunction = ffi.Void Function(
    GDExtensionUninitializedTypePtr, GDExtensionVariantPtr);
typedef DartGDExtensionTypeFromVariantConstructorFuncFunction = void Function(
    GDExtensionUninitializedTypePtr, GDExtensionVariantPtr);
typedef GDExtensionPtrGetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrGetterFunction>>;
typedef GDExtensionPtrGetterFunction = ffi.Void Function(
    GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
typedef DartGDExtensionPtrGetterFunction = void Function(
    GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
typedef GDExtensionPtrSetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrSetterFunction>>;
typedef GDExtensionPtrSetterFunction = ffi.Void Function(
    GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
typedef DartGDExtensionPtrSetterFunction = void Function(
    GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
typedef GDExtensionPtrIndexedGetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrIndexedGetterFunction>>;
typedef GDExtensionPtrIndexedGetterFunction = ffi.Void Function(
    GDExtensionConstTypePtr p_base,
    GDExtensionInt p_index,
    GDExtensionTypePtr r_value);
typedef DartGDExtensionPtrIndexedGetterFunction = void Function(
    GDExtensionConstTypePtr p_base,
    DartGDExtensionInt p_index,
    GDExtensionTypePtr r_value);
typedef GDExtensionPtrIndexedSetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrIndexedSetterFunction>>;
typedef GDExtensionPtrIndexedSetterFunction = ffi.Void Function(
    GDExtensionTypePtr p_base,
    GDExtensionInt p_index,
    GDExtensionConstTypePtr p_value);
typedef DartGDExtensionPtrIndexedSetterFunction = void Function(
    GDExtensionTypePtr p_base,
    DartGDExtensionInt p_index,
    GDExtensionConstTypePtr p_value);
typedef GDExtensionPtrKeyedSetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrKeyedSetterFunction>>;
typedef GDExtensionPtrKeyedSetterFunction = ffi.Void Function(
    GDExtensionTypePtr p_base,
    GDExtensionConstTypePtr p_key,
    GDExtensionConstTypePtr p_value);
typedef DartGDExtensionPtrKeyedSetterFunction = void Function(
    GDExtensionTypePtr p_base,
    GDExtensionConstTypePtr p_key,
    GDExtensionConstTypePtr p_value);
typedef GDExtensionPtrKeyedGetter
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrKeyedGetterFunction>>;
typedef GDExtensionPtrKeyedGetterFunction = ffi.Void Function(
    GDExtensionConstTypePtr p_base,
    GDExtensionConstTypePtr p_key,
    GDExtensionTypePtr r_value);
typedef DartGDExtensionPtrKeyedGetterFunction = void Function(
    GDExtensionConstTypePtr p_base,
    GDExtensionConstTypePtr p_key,
    GDExtensionTypePtr r_value);
typedef GDExtensionPtrKeyedChecker
    = ffi.Pointer<ffi.NativeFunction<GDExtensionPtrKeyedCheckerFunction>>;
typedef GDExtensionPtrKeyedCheckerFunction = ffi.Uint32 Function(
    GDExtensionConstVariantPtr p_base, GDExtensionConstVariantPtr p_key);
typedef DartGDExtensionPtrKeyedCheckerFunction = int Function(
    GDExtensionConstVariantPtr p_base, GDExtensionConstVariantPtr p_key);
typedef GDExtensionConstStringPtr = ffi.Pointer<ffi.Void>;
typedef char16_t = ffi.Uint16;
typedef Dartchar16_t = int;
typedef GDExtensionMethodBindPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstObjectPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionConstRefPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionRefPtr = ffi.Pointer<ffi.Void>;
typedef GDExtensionScriptInstancePtr = ffi.Pointer<ffi.Void>;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
